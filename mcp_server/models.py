# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:57:00+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class Country(BaseModel):
    acronym: str
    name: str


class Address(BaseModel):
    city: str
    complement: str
    coordinates: str
    country: Country = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    neighborhood: str
    number: str
    postalCode: str
    state: str
    street: str


class Address1(BaseModel):
    city: str
    complement: str
    coordinates: List[List[float]]
    country: Country = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    neighborhood: str
    number: str
    postalCode: str
    state: str
    street: str


class Location(BaseModel):
    latitude: float
    longitude: float


class Address2(BaseModel):
    city: str
    complement: str
    country: Country = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    location: Location = Field(
        ...,
        examples=[{'latitude': -22.974477767944336, 'longitude': -43.18672561645508}],
        title='Location5',
    )
    neighborhood: str
    number: str
    postalCode: str
    reference: str
    state: str
    street: str


class Address4(BaseModel):
    city: str
    complement: str
    country: Country = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    location: Location = Field(
        ...,
        examples=[{'latitude': -22.974477767944336, 'longitude': -43.18672561645508}],
        title='Location5',
    )
    neighborhood: str
    number: str
    postalCode: str
    state: str
    street: str


class Balance(BaseModel):
    hasUnlimitedQuantity: bool
    reservedQuantity: int
    totalQuantity: int
    warehouseId: str
    warehouseName: str


class BusinessHour(BaseModel):
    closingTime: str
    dayOfWeek: int
    openingTime: str


class Dimension(BaseModel):
    height: int
    length: int
    weight: int
    width: int


class KitItemItem(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension = Field(
        ...,
        examples=[{'height': 1, 'length': 1, 'weight': 150, 'width': 1}],
        title='Dimension',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    price: int
    quantity: int


class Item(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension = Field(
        ...,
        examples=[{'height': 1, 'length': 1, 'weight': 150, 'width': 1}],
        title='Dimension',
    )
    groupItemId: str
    id: str
    kitItem: List[KitItemItem] = Field(..., description='')
    price: int
    quantity: int


class Location2(BaseModel):
    country: str
    point: List[float] = Field(..., description='')
    zipCode: str


class CalculateSLARequest(BaseModel):
    items: List[Item] = Field(..., description='')
    location: Location2 = Field(
        ...,
        examples=[
            {
                'country': 'BRA',
                'point': [-43.32475950000003, -22.9999575],
                'zipCode': '22780084',
            }
        ],
        title='Location3',
    )
    salesChannel: str


class Dimension2(BaseModel):
    height: float
    length: float
    maxSumDimension: float
    weight: float
    width: float


class Item1(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension2 = Field(
        ...,
        examples=[
            {
                'height': 10,
                'length': 35,
                'maxSumDimension': 0,
                'weight': 800,
                'width': 12,
            }
        ],
        title='Dimension1',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    modal: str
    price: float
    quantity: int
    unlimitedQuantity: bool


class InStore(BaseModel):
    IsCheckedIn: bool
    StoreId: str


class Location3(BaseModel):
    country: str
    deliveryPointId: str
    inStore: InStore = Field(
        ..., examples=[{'IsCheckedIn': False, 'StoreId': '180082'}], title='InStore1'
    )
    point: str
    zipCode: str


class SlaRequestItem(BaseModel):
    deliveryWindows: str
    dockId: str
    dockTime: str
    freightTableId: str
    freightTableName: str
    item: Item1 = Field(
        ...,
        examples=[
            {
                'additionalHandlingTime': '00:00:00',
                'dimension': {
                    'height': 10,
                    'length': 35,
                    'maxSumDimension': 0,
                    'weight': 800,
                    'width': 12,
                },
                'groupItemId': None,
                'id': '2390059',
                'kitItem': [],
                'modal': None,
                'price': 0,
                'quantity': 1,
                'unlimitedQuantity': False,
            }
        ],
        title='Item1',
    )
    listPrice: float
    location: Location3 = Field(
        ...,
        examples=[
            {
                'country': 'BRA',
                'deliveryPointId': None,
                'inStore': {'IsCheckedIn': False, 'StoreId': '180082'},
                'point': None,
                'zipCode': '22220070',
            }
        ],
        title='Location1',
    )
    pickupStoreInfo: str
    promotionalPrice: float
    slaType: str
    slaTypeName: str
    timeToDockPlusDockTime: str
    totalTime: str
    transitTime: str
    wareHouseId: str
    wmsEndPoint: str


class CreateReservation(BaseModel):
    AuthorizedDateUtc: str
    CanceledDateUtc: str
    ConfirmedDateUtc: str
    Errors: List[str] = Field(..., description='')
    IsSucess: bool
    LastUpdateDateUtc: str
    LockId: str
    MaximumConfirmationDateUtc: str
    PickupPointItemOptions: str
    ReservationDateUtc: str
    SalesChannel: str
    SlaRequest: List[SlaRequestItem] = Field(..., description='')
    Status: int


class Dimension3(BaseModel):
    height: int
    length: int
    weight: int
    width: int


class Item2(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension3 = Field(
        ...,
        examples=[{'height': 1, 'length': 1, 'weight': 150, 'width': 1}],
        title='Dimension',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    price: int
    quantity: int


class Location4(BaseModel):
    country: str
    inStore: InStore = Field(
        ..., examples=[{'IsCheckedIn': False, 'StoreId': None}], title='InStore'
    )
    zipCode: str


class DeliveryItemOption(BaseModel):
    aditionalTimeBlockedDays: str
    deliveryWindows: List[str] = Field(..., description='')
    dockId: str
    dockTime: str
    item: Item2 = Field(
        ...,
        examples=[
            {
                'additionalHandlingTime': '00:00:00',
                'dimension': {'height': 1, 'length': 1, 'weight': 150, 'width': 1},
                'groupItemId': None,
                'id': '2390059',
                'kitItem': [],
                'price': 0,
                'quantity': 1,
            }
        ],
        title='Item',
    )
    listPrice: float
    location: Location4 = Field(
        ...,
        examples=[
            {
                'country': 'BRA',
                'inStore': {'IsCheckedIn': False, 'StoreId': None},
                'zipCode': '22220070',
            }
        ],
        title='Location',
    )
    promotionalPrice: float
    slaType: str
    slaTypeName: str
    timeToDockPlusDockTime: str
    totalTime: str
    transitTime: str
    wareHouseId: str


class CreateReservationRequest(BaseModel):
    autorizationExpirationTTL: str
    deliveryItemOptions: List[DeliveryItemOption] = Field(..., description='')
    lockId: str
    salesChannel: str


class Location5(BaseModel):
    latitude: float
    longitude: float


class Address3(BaseModel):
    city: str
    complement: str
    country: Country = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    location: Location5 = Field(
        ...,
        examples=[{'latitude': -22.974477767944336, 'longitude': -43.18672561645508}],
        title='Location5',
    )
    neighborhood: str
    number: str
    postalCode: str
    reference: str
    state: str
    street: str


class CreateUpdate(BaseModel):
    address: Address3 = Field(
        ...,
        examples=[
            {
                'city': 'Rio de Janeiro',
                'complement': '',
                'country': {'acronym': 'BRA', 'name': 'Brazil'},
                'location': {
                    'latitude': -22.974477767944336,
                    'longitude': -43.18672561645508,
                },
                'neighborhood': 'Copacabana',
                'number': '',
                'postalCode': '22070002',
                'reference': None,
                'state': 'RJ',
                'street': 'Avenida Atl├óntica',
            }
        ],
        title='Address2',
    )
    businessHours: List[BusinessHour] = Field(..., description='')
    description: str
    formatted_address: str
    id: str
    instructions: str
    isActive: bool
    name: str
    pickupHolidays: List[str] = Field(..., description='')
    tagsLabel: List[str] = Field(..., description='')


class DeliveryCapacityItem(BaseModel):
    capacityType: str = Field(
        ...,
        description='Defines how the delivery capacity is measured for this reservation window, by maximum number of orders (`"ORDERS_QUANTITY"`) or SKUs (`"SKUS_QUANTITY"`).',
        examples=['ORDERS_QUANTITY'],
    )
    maxValue: float = Field(
        ...,
        description='Maximum number of orders or SKUs that the store is capable of fulfilling.',
        examples=[0],
    )


class DeliveryRange(BaseModel):
    deliveryCapacity: Optional[List[DeliveryCapacityItem]] = Field(
        None,
        description='Sets maximum delivery capacity for a given reservation window for scheduled delivery.',
    )
    endTime: str = Field(
        ..., description='End time for day of the week.', examples=['12:30:00']
    )
    listPrice: float = Field(
        ..., description='List price for day of the week.', examples=[0]
    )
    startTime: str = Field(
        ...,
        description='Start time for day of the week.',
        examples=['11:00:00'],
        title='startTime',
    )


class DayOfWeekForDeliveryItem(BaseModel):
    dayOfWeek: int = Field(
        ...,
        description='Day of the week, from `0` (sunday) to `6` (saturday).',
        examples=[2],
    )
    deliveryRanges: List[DeliveryRange] = Field(
        ..., description='Reservation windows for scheduled delivery.'
    )


class MaxDimension(BaseModel):
    height: str
    length: str
    maxSumDimension: str


class CreateUpdateCarrierDeliveryWindowsRequest(BaseModel):
    carrierSchedule: List[str] = Field(..., description='')
    dayOfWeekForDelivery: List[DayOfWeekForDeliveryItem] = Field(
        ...,
        description='Select the chosen days for delivery. Values for each day of the week are: 0 = sunday, 1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday. Make sure to add the available hours for the chosen days, following the example.',
    )
    deliveryOnWeekends: bool
    factorCubicWeight: str
    id: str
    maxDimension: MaxDimension = Field(
        ...,
        examples=[{'height': None, 'length': None, 'maxSumDimension': None}],
        title='MaxDimension1',
    )
    maxRangeDelivery: int
    minimunCubicWeight: str
    modals: List[str] = Field(..., description='')
    name: str
    numberOfItemsPerShipment: str
    onlyItemsWithDefinedModal: bool
    scheduledDelivery: bool
    slaType: str


class DeliveryRange1(BaseModel):
    deliveryCapacity: Optional[List[DeliveryCapacityItem]] = Field(
        None,
        description='Sets maximum delivery capacity for a given reservation window for scheduled delivery.',
    )
    endTime: str = Field(
        ..., description='End time for day of the week.', examples=['12:30:00']
    )
    listPrice: float = Field(
        ..., description='List price for day of the week.', examples=[0]
    )
    startTime: str = Field(
        ...,
        description='Start time for day of the week.',
        examples=['11:00:00'],
        title='startTime',
    )


class DayOfWeekForDeliveryItem1(BaseModel):
    dayOfWeek: int = Field(
        ...,
        description='Day of the week, from `0` (sunday) to `6` (saturday).',
        examples=[2],
    )
    deliveryRanges: List[DeliveryRange1] = Field(
        ..., description='Reservation windows for scheduled delivery.'
    )


class MaxDimension1(BaseModel):
    height: int
    length: int
    maxSumDimension: int
    weight: int
    width: int


class CreateUpdateCarrierRequest(BaseModel):
    carrierSchedule: List[str] = Field(..., description='')
    dayOfWeekBlockeds: List[str] = Field(..., description='')
    dayOfWeekForDelivery: List[DayOfWeekForDeliveryItem1] = Field(
        ...,
        description='Select the chosen days for delivery. Values for each day of the week are: 0 = sunday, 1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday. Make sure to add the available hours for the chosen days, following the example.',
    )
    deliveryOnWeekends: bool
    exclusiveToDeliveryPoints: bool
    factorCubicWeight: str
    freightTableProcessStatus: int
    freightTableValueError: str
    freightValue: List[str] = Field(..., description='')
    id: str
    isPolygon: bool
    maxDimension: MaxDimension1 = Field(
        ...,
        examples=[
            {'height': 0, 'length': 0, 'maxSumDimension': 0, 'weight': 0, 'width': 0}
        ],
        title='MaxDimension',
    )
    maxRangeDelivery: int
    minimunCubicWeight: int
    modals: List[str] = Field(..., description='')
    name: str
    numberOfItemsPerShipment: str
    onlyItemsWithDefinedModal: bool
    scheduledDelivery: bool
    slaType: str


class Address5(BaseModel):
    city: str
    complement: str
    coordinates: List[List[float]]
    country: Country = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    neighborhood: str
    number: str
    postalCode: str
    state: str
    street: str


class Address6(BaseModel):
    city: str
    complement: str
    coordinates: str
    country: Country = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    neighborhood: str
    number: str
    postalCode: str
    state: str
    street: str


class PickupStoreInfo(BaseModel):
    additionalInfo: str
    address: Address6 = Field(
        ...,
        examples=[
            {
                'city': 'Rio de Janeiro',
                'complement': '',
                'coordinates': None,
                'country': {'acronym': 'BRA', 'name': 'Brazil'},
                'neighborhood': 'Catete',
                'number': '100',
                'postalCode': '22220070',
                'state': 'RJ',
                'street': 'Artur Bernardes Street',
            }
        ],
        title='Address',
    )
    dockId: str
    friendlyName: str
    isPickupStore: bool
    storeId: str


class CreateUpdateDockRequest(BaseModel):
    address: Address5 = Field(
        ...,
        examples=[
            {
                'city': 'Rio de Janeiro',
                'complement': '',
                'coordinates': [[-43.18228090000002, -22.9460398]],
                'country': {'acronym': 'BRA', 'name': 'Brazil'},
                'neighborhood': 'Catete',
                'number': '100',
                'postalCode': '22220070',
                'state': 'RJ',
                'street': 'Artur Bernardes Street',
            }
        ],
        title='Address1',
    )
    dockTimeFake: str
    freightTableIds: List[str] = Field(..., description='')
    id: str
    name: str
    pickupStoreInfo: PickupStoreInfo = Field(
        ...,
        examples=[
            {
                'additionalInfo': None,
                'address': {
                    'city': 'Rio de Janeiro',
                    'complement': '',
                    'coordinates': None,
                    'country': {'acronym': 'BRA', 'name': 'Brazil'},
                    'neighborhood': 'Catete',
                    'number': '100',
                    'postalCode': '22220070',
                    'state': 'RJ',
                    'street': 'Artur Bernardes Street',
                },
                'dockId': None,
                'friendlyName': None,
                'isPickupStore': False,
                'storeId': None,
            }
        ],
        title='PickupStoreInfo',
    )
    priority: int
    salesChannel: str
    salesChannels: List[str] = Field(..., description='')
    timeFakeOverhead: str
    wmsEndPoint: str


class CreateUpdateFreightValuesRequest(BaseModel):
    absoluteMoneyCost: str
    country: str
    maxVolume: int
    operationType: int
    polygon: str
    pricePercent: int
    pricePercentByWeight: int
    timeCost: str
    weightEnd: int
    weightStart: int
    zipCodeEnd: str
    zipCodeStart: str


class CreateUpdateHolidayRequest(BaseModel):
    name: str
    startDate: str


class GeoShape(BaseModel):
    coordinates: List[List[float]]


class CreateUpdatePolygonRequest(BaseModel):
    geoShape: GeoShape = Field(..., title='GeoShape')
    name: str


class Address7(BaseModel):
    city: str
    complement: str
    country: Country = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    location: Location5 = Field(
        ...,
        examples=[{'latitude': -22.974477767944336, 'longitude': -43.18672561645508}],
        title='Location5',
    )
    neighborhood: str
    number: str
    postalCode: str
    reference: str
    state: str
    street: str


class CreateUpdateRequest(BaseModel):
    address: Address7 = Field(
        ...,
        examples=[
            {
                'city': 'Rio de Janeiro',
                'complement': '',
                'country': {'acronym': 'BRA', 'name': 'Brazil'},
                'location': {
                    'latitude': -22.974477767944336,
                    'longitude': -43.18672561645508,
                },
                'neighborhood': 'Copacabana',
                'number': '',
                'postalCode': '22070002',
                'reference': None,
                'state': 'RJ',
                'street': 'Avenida Atl├óntica',
            }
        ],
        title='Address2',
    )
    businessHours: List[BusinessHour] = Field(..., description='')
    description: str
    formatted_address: str
    id: str
    instructions: str
    isActive: bool
    name: str
    tagsLabel: List[str] = Field(..., description='')


class WarehouseDock(BaseModel):
    cost: str
    costToDisplay: str
    dockId: str
    name: str
    time: str
    translateDays: str


class CreateUpdateWarehouseRequest(BaseModel):
    id: str
    name: str
    warehouseDocks: List[WarehouseDock] = Field(..., description='')


class DeliveryRange2(BaseModel):
    endTime: str
    listPrice: int
    startTime: str


class DayOfWeekForDelivery(BaseModel):
    dayOfWeek: int
    deliveryRanges: List[DeliveryRange2] = Field(..., description='')


class DeliveryRange3(BaseModel):
    endTime: str
    listPrice: float
    startTime: str


class DayOfWeekForDelivery1(BaseModel):
    dayOfWeek: int
    deliveryRanges: List[DeliveryRange3] = Field(..., description='')


class Item3(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension3 = Field(
        ...,
        examples=[{'height': 1, 'length': 1, 'weight': 150, 'width': 1}],
        title='Dimension',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    price: int
    quantity: int


class Location7(BaseModel):
    country: str
    inStore: InStore = Field(
        ..., examples=[{'IsCheckedIn': False, 'StoreId': None}], title='InStore'
    )
    zipCode: str


class DeliveryItemOption1(BaseModel):
    aditionalTimeBlockedDays: str
    deliveryWindows: List[str] = Field(..., description='')
    dockId: str
    dockTime: str
    item: Item3 = Field(
        ...,
        examples=[
            {
                'additionalHandlingTime': '00:00:00',
                'dimension': {'height': 1, 'length': 1, 'weight': 150, 'width': 1},
                'groupItemId': None,
                'id': '2390059',
                'kitItem': [],
                'price': 0,
                'quantity': 1,
            }
        ],
        title='Item',
    )
    listPrice: float
    location: Location7 = Field(
        ...,
        examples=[
            {
                'country': 'BRA',
                'inStore': {'IsCheckedIn': False, 'StoreId': None},
                'zipCode': '22220070',
            }
        ],
        title='Location',
    )
    promotionalPrice: float
    slaType: str
    slaTypeName: str
    timeToDockPlusDockTime: str
    totalTime: str
    transitTime: str
    wareHouseId: str


class DeliveryRange4(BaseModel):
    endTime: str
    listPrice: int
    startTime: str


class DeliveryRange11(BaseModel):
    endTime: str
    listPrice: float
    startTime: str


class DeliveryWindow(BaseModel):
    endDateUtc: Optional[str] = None
    listPrice: Optional[float] = None
    startDateUtc: Optional[str] = None


class Dimension1(BaseModel):
    height: float
    length: float
    maxSumDimension: float
    weight: float
    width: float


class Error(BaseModel):
    code: str
    message: str


class Errorbytoomanyactivereservations(BaseModel):
    error: Error = Field(
        ...,
        examples=[{'code': '429', 'message': 'Too many active reservation!'}],
        title='Error',
    )


class Location8(BaseModel):
    latitude: float
    longitude: float


class Address8(BaseModel):
    city: str
    complement: str
    country: Country = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    location: Location8 = Field(
        ...,
        examples=[{'latitude': -22.974477767944336, 'longitude': -43.18672561645508}],
        title='Location5',
    )
    neighborhood: str
    number: str
    postalCode: str
    state: str
    street: str


class GetById(BaseModel):
    address: Address8 = Field(
        ...,
        examples=[
            {
                'city': 'Rio de Janeiro',
                'complement': '',
                'country': {'acronym': 'BRA', 'name': 'Brazil'},
                'location': {
                    'latitude': -22.92860984802246,
                    'longitude': -22.92860984802246,
                },
                'neighborhood': 'Catete',
                'number': '',
                'postalCode': '22220070',
                'state': 'RJ',
                'street': 'Rua Artur Bernardes',
            }
        ],
        title='Address4',
    )
    businessHours: List[BusinessHour] = Field(..., description='')
    description: str
    formatted_address: str
    id: str
    instructions: str
    isActive: bool
    name: str
    warehouseId: str


class InStore1(BaseModel):
    IsCheckedIn: bool
    StoreId: str


class Item4(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension3 = Field(
        ...,
        examples=[{'height': 1, 'length': 1, 'weight': 150, 'width': 1}],
        title='Dimension',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    price: int
    quantity: int


class Dimension7(BaseModel):
    height: float
    length: float
    maxSumDimension: float
    weight: float
    width: float


class Item11(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension7 = Field(
        ...,
        examples=[
            {
                'height': 10,
                'length': 35,
                'maxSumDimension': 0,
                'weight': 800,
                'width': 12,
            }
        ],
        title='Dimension1',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    modal: str
    price: float
    quantity: int
    unlimitedQuantity: bool


class Dimension8(BaseModel):
    height: int
    length: int
    weight: int
    width: int


class KitItemItem1(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension8 = Field(
        ...,
        examples=[{'height': 1, 'length': 1, 'weight': 150, 'width': 1}],
        title='Dimension',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    price: int
    quantity: int


class Item31(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension8 = Field(
        ...,
        examples=[{'height': 1, 'length': 1, 'weight': 150, 'width': 1}],
        title='Dimension',
    )
    groupItemId: str
    id: str
    kitItem: List[KitItemItem1] = Field(..., description='')
    price: int
    quantity: int


class KitItem(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension8 = Field(
        ...,
        examples=[{'height': 1, 'length': 1, 'weight': 150, 'width': 1}],
        title='Dimension',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    price: int
    quantity: int


class WarehouseDock1(BaseModel):
    cost: float
    dockId: str
    time: str


class ListAllAarehouses(BaseModel):
    id: str
    name: str
    warehouseDocks: List[WarehouseDock1] = Field(..., description='')


class PickupStoreInfo1(BaseModel):
    additionalInfo: str
    address: str
    dockId: str
    friendlyName: str
    isPickupStore: bool
    storeId: str


class ListAllDocks(BaseModel):
    dockTimeFake: str
    freightTableIds: List[str] = Field(..., description='')
    id: str
    name: str
    pickupStoreInfo: PickupStoreInfo1 = Field(
        ...,
        examples=[
            {
                'additionalInfo': None,
                'address': None,
                'dockId': None,
                'friendlyName': None,
                'isPickupStore': False,
                'storeId': None,
            }
        ],
        title='PickupStoreInfo1',
    )
    priority: int
    salesChannel: str
    salesChannels: List[str] = Field(..., description='')
    timeFakeOverhead: str
    wmsEndPoint: str


class ListFreightValues(BaseModel):
    absoluteMoneyCost: float
    country: str
    maxVolume: float
    minimumValueInsurance: float
    operationType: int
    polygon: str
    pricePercent: float
    pricePercentByWeight: float
    restrictedFreights: List[str] = Field(..., description='')
    timeCost: str
    weightEnd: float
    weightStart: float
    zipCodeEnd: str
    zipCodeStart: str


class BalanceItem(BaseModel):
    hasUnlimitedQuantity: bool
    reservedQuantity: int
    totalQuantity: int
    warehouseId: str
    warehouseName: str


class ListInventoryBySKU(BaseModel):
    balance: List[BalanceItem] = Field(..., description='')
    skuId: str


class Location9(BaseModel):
    country: str
    deliveryPointId: str
    inStore: InStore = Field(
        ..., examples=[{'IsCheckedIn': False, 'StoreId': '180082'}], title='InStore1'
    )
    point: str
    zipCode: str


class ListReservationByWarehouseAndSKU(BaseModel):
    aditionalTimeBlockedDays: str
    availabilityQuantity: int
    carrierSchedule: List[str] = Field(..., description='')
    coordinates: str
    deliveryOnWeekends: bool
    deliveryWindows: List[DeliveryWindow] = Field(..., description='')
    dockId: str
    dockTime: str
    freightTableId: str
    freightTableName: str
    itemId: str
    listPrice: float
    location: Location9 = Field(
        ...,
        examples=[
            {
                'country': 'BRA',
                'deliveryPointId': None,
                'inStore': {'IsCheckedIn': False, 'StoreId': '180082'},
                'point': None,
                'zipCode': '22220070',
            }
        ],
        title='Location1',
    )
    pickupStoreInfo: str
    quantity: int
    restrictedFreight: str
    salesChannel: str
    slaType: str
    slaTypeName: str
    timeToDockPlusDockTime: str
    totalTime: str
    transitTime: str
    wareHouseId: str


class Location10(BaseModel):
    country: str
    inStore: InStore = Field(
        ..., examples=[{'IsCheckedIn': False, 'StoreId': None}], title='InStore'
    )
    zipCode: str


class Location1(BaseModel):
    country: str
    deliveryPointId: str
    inStore: InStore = Field(
        ..., examples=[{'IsCheckedIn': False, 'StoreId': '180082'}], title='InStore1'
    )
    point: str
    zipCode: str


class Location31(BaseModel):
    country: str
    point: List[float] = Field(..., description='')
    zipCode: str


class Location51(BaseModel):
    latitude: float
    longitude: float


class MaxDimension11(BaseModel):
    height: str
    length: str
    maxSumDimension: str


class MaxDimension2(BaseModel):
    height: float
    length: float
    maxSumDimension: float
    weight: float
    width: float


class Address9(BaseModel):
    city: str
    complement: str
    coordinates: str
    country: Country = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    neighborhood: str
    number: str
    postalCode: str
    state: str
    street: str


class PickupStoreInfo2(BaseModel):
    additionalInfo: str
    address: Address9 = Field(
        ...,
        examples=[
            {
                'city': 'Rio de Janeiro',
                'complement': '',
                'coordinates': None,
                'country': {'acronym': 'BRA', 'name': 'Brazil'},
                'neighborhood': 'Catete',
                'number': '100',
                'postalCode': '22220070',
                'state': 'RJ',
                'street': 'Artur Bernardes Street',
            }
        ],
        title='Address',
    )
    dockId: str
    friendlyName: str
    isPickupStore: bool
    storeId: str


class PickupStoreInfo11(BaseModel):
    additionalInfo: str
    address: str
    dockId: str
    friendlyName: str
    isPickupStore: bool
    storeId: str


class Dimension12(BaseModel):
    height: float
    length: float
    maxSumDimension: float
    weight: float
    width: float


class Item5(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension12 = Field(
        ...,
        examples=[
            {
                'height': 10,
                'length': 35,
                'maxSumDimension': 0,
                'weight': 800,
                'width': 12,
            }
        ],
        title='Dimension1',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    modal: str
    price: float
    quantity: int
    unlimitedQuantity: bool


class Location12(BaseModel):
    country: str
    deliveryPointId: str
    inStore: InStore = Field(
        ..., examples=[{'IsCheckedIn': False, 'StoreId': '180082'}], title='InStore1'
    )
    point: str
    zipCode: str


class SlaRequest(BaseModel):
    deliveryWindows: str
    dockId: str
    dockTime: str
    freightTableId: str
    freightTableName: str
    item: Item5 = Field(
        ...,
        examples=[
            {
                'additionalHandlingTime': '00:00:00',
                'dimension': {
                    'height': 10,
                    'length': 35,
                    'maxSumDimension': 0,
                    'weight': 800,
                    'width': 12,
                },
                'groupItemId': None,
                'id': '2390059',
                'kitItem': [],
                'modal': None,
                'price': 0,
                'quantity': 1,
                'unlimitedQuantity': False,
            }
        ],
        title='Item1',
    )
    listPrice: float
    location: Location12 = Field(
        ...,
        examples=[
            {
                'country': 'BRA',
                'deliveryPointId': None,
                'inStore': {'IsCheckedIn': False, 'StoreId': '180082'},
                'point': None,
                'zipCode': '22220070',
            }
        ],
        title='Location1',
    )
    pickupStoreInfo: str
    promotionalPrice: float
    slaType: str
    slaTypeName: str
    timeToDockPlusDockTime: str
    totalTime: str
    transitTime: str
    wareHouseId: str
    wmsEndPoint: str


class Success(BaseModel):
    availableQuantity: int
    dispatchedReservationsQuantity: int
    isUnlimitedQuantity: bool
    quantity: int
    skuId: str
    totalReservedQuantity: int
    warehouseId: str


class UpdateInventoryBySkuandWarehouseRequest(BaseModel):
    dateUtcOnBalanceSystem: str
    quantity: int
    unlimitedQuantity: bool


class WarehouseDock2(BaseModel):
    cost: str
    costToDisplay: str
    dockId: str
    name: str
    time: str
    translateDays: str


class WarehouseDock11(BaseModel):
    cost: float
    dockId: str
    time: str


class DeliveryRange5(BaseModel):
    deliveryCapacity: Optional[List[DeliveryCapacityItem]] = Field(
        None,
        description='Sets maximum delivery capacity for a given reservation window for scheduled delivery.',
    )
    endTime: str = Field(
        ..., description='End time for day of the week.', examples=['12:30:00']
    )
    listPrice: float = Field(
        ..., description='List price for day of the week.', examples=[0]
    )
    startTime: str = Field(
        ...,
        description='Start time for day of the week.',
        examples=['11:00:00'],
        title='startTime',
    )


class DayOfWeekForDeliveryItem2(BaseModel):
    dayOfWeek: int = Field(
        ...,
        description='Day of the week, from `0` (sunday) to `6` (saturday).',
        examples=[2],
    )
    deliveryRanges: List[DeliveryRange5] = Field(
        ..., description='Reservation windows for scheduled delivery.'
    )


class MaxDimension3(BaseModel):
    height: float
    length: float
    maxSumDimension: float
    weight: float
    width: float


class Allcarrier(BaseModel):
    carrierSchedule: List[str] = Field(..., description='')
    dayOfWeekBlockeds: List[str] = Field(..., description='')
    dayOfWeekForDelivery: List[DayOfWeekForDeliveryItem2] = Field(
        ...,
        description='Select the chosen days for delivery. Values for each day of the week are: 0 = sunday, 1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday. Make sure to add the available hours for the chosen days, following the example.',
    )
    deliveryOnWeekends: bool
    exclusiveToDeliveryPoints: bool
    factorCubicWeight: float
    freightTableProcessStatus: int
    freightTableValueError: str
    freightValue: List[str] = Field(..., description='')
    id: str
    isPolygon: bool
    maxDimension: MaxDimension3 = Field(
        ...,
        examples=[
            {
                'height': 110,
                'length': 110,
                'maxSumDimension': 200,
                'weight': 0,
                'width': 110,
            }
        ],
        title='MaxDimension2',
    )
    maxRangeDelivery: int
    minimunCubicWeight: float
    modals: List[str] = Field(..., description='')
    name: str
    numberOfItemsPerShipment: str
    onlyItemsWithDefinedModal: bool
    scheduledDelivery: bool
    slaType: str


class DeliveryRange6(BaseModel):
    deliveryCapacity: Optional[List[DeliveryCapacityItem]] = Field(
        None,
        description='Sets maximum delivery capacity for a given reservation window for scheduled delivery.',
    )
    endTime: str = Field(
        ..., description='End time for day of the week.', examples=['12:30:00']
    )
    listPrice: float = Field(
        ..., description='List price for day of the week.', examples=[0]
    )
    startTime: str = Field(
        ...,
        description='Start time for day of the week.',
        examples=['11:00:00'],
        title='startTime',
    )


class DayOfWeekForDeliveryItem3(BaseModel):
    dayOfWeek: int = Field(
        ...,
        description='Day of the week, from `0` (sunday) to `6` (saturday).',
        examples=[2],
    )
    deliveryRanges: List[DeliveryRange6] = Field(
        ..., description='Reservation windows for scheduled delivery.'
    )


class Carrierbyid(BaseModel):
    carrierSchedule: List[str] = Field(..., description='')
    dayOfWeekBlockeds: List[str] = Field(..., description='')
    dayOfWeekForDelivery: List[DayOfWeekForDeliveryItem3] = Field(
        ...,
        description='Select the chosen days for delivery. Values for each day of the week are: 0 = sunday, 1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday. Make sure to add the available hours for the chosen days, following the example.',
    )
    deliveryOnWeekends: bool
    exclusiveToDeliveryPoints: bool
    factorCubicWeight: float
    freightTableProcessStatus: int
    freightTableValueError: str
    freightValue: List[str] = Field(..., description='')
    id: str
    isPolygon: bool
    maxDimension: MaxDimension3 = Field(
        ...,
        examples=[
            {
                'height': 110,
                'length': 110,
                'maxSumDimension': 200,
                'weight': 0,
                'width': 110,
            }
        ],
        title='MaxDimension2',
    )
    maxRangeDelivery: int
    minimunCubicWeight: float
    modals: List[str] = Field(..., description='')
    name: str
    numberOfItemsPerShipment: str
    onlyItemsWithDefinedModal: bool
    scheduledDelivery: bool
    slaType: str


class PickupStoreInfo3(BaseModel):
    additionalInfo: str
    address: str
    dockId: str
    friendlyName: str
    isPickupStore: bool
    storeId: str


class ApiLogisticsPvtConfigurationDocksGetResponseItem(BaseModel):
    dockTimeFake: str
    freightTableIds: List[str] = Field(..., description='')
    id: str
    name: str
    pickupStoreInfo: PickupStoreInfo3 = Field(
        ...,
        examples=[
            {
                'additionalInfo': None,
                'address': None,
                'dockId': None,
                'friendlyName': None,
                'isPickupStore': False,
                'storeId': None,
            }
        ],
        title='PickupStoreInfo1',
    )
    priority: int
    salesChannel: str
    salesChannels: List[str] = Field(..., description='')
    timeFakeOverhead: str
    wmsEndPoint: str


class ApiLogisticsPvtConfigurationDocksGetResponse(
    RootModel[List[ApiLogisticsPvtConfigurationDocksGetResponseItem]]
):
    root: List[ApiLogisticsPvtConfigurationDocksGetResponseItem]


class Address10(BaseModel):
    city: str
    complement: str
    coordinates: List[List[float]]
    country: Country = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    neighborhood: str
    number: str
    postalCode: str
    state: str
    street: str


class ApiLogisticsPvtConfigurationDocksPostRequest(BaseModel):
    address: Address10 = Field(
        ...,
        examples=[
            {
                'city': 'Rio de Janeiro',
                'complement': '',
                'coordinates': [[-43.18228090000002, -22.9460398]],
                'country': {'acronym': 'BRA', 'name': 'Brazil'},
                'neighborhood': 'Catete',
                'number': '100',
                'postalCode': '22220070',
                'state': 'RJ',
                'street': 'Artur Bernardes Street',
            }
        ],
        title='Address1',
    )
    dockTimeFake: str
    freightTableIds: List[str] = Field(..., description='')
    id: str
    name: str
    priority: int
    salesChannel: str
    salesChannels: List[str] = Field(..., description='')
    timeFakeOverhead: str
    wmsEndPoint: str


class ApiLogisticsPvtConfigurationDocksDockIdGetResponse(BaseModel):
    dockTimeFake: str
    freightTableIds: List[str] = Field(..., description='')
    id: str
    name: str
    pickupStoreInfo: PickupStoreInfo3 = Field(
        ...,
        examples=[
            {
                'additionalInfo': None,
                'address': None,
                'dockId': None,
                'friendlyName': None,
                'isPickupStore': False,
                'storeId': None,
            }
        ],
        title='PickupStoreInfo1',
    )
    priority: int
    salesChannel: str
    salesChannels: List[str] = Field(..., description='')
    timeFakeOverhead: str
    wmsEndPoint: str


class ApiLogisticsPvtConfigurationFreightsCarrierIdValuesUpdatePostRequestItem(
    BaseModel
):
    absoluteMoneyCost: str = Field(
        ...,
        description='Fixed shipping cost to be charged in a decimal number.',
        examples=['1.00'],
    )
    country: str = Field(
        ...,
        description='Three letter ISO code for the country where the delivery will take place.',
        examples=['BRA'],
    )
    maxVolume: int = Field(
        ...,
        description='Maximum volume that can be transported by the carrier in cm³.',
        examples=[1000000000],
    )
    operationType: int = Field(
        ...,
        description='Indicates desired action for the object. Possible values are `1` (Insert), `2` (Update) or `3`(Delete).',
        examples=[1],
    )
    polygon: str = Field(
        ...,
        description='Polygon ID, according to the [geolocation](https://help.vtex.com/en/tutorial/registering-geolocation/) feature.',
        examples=['polygon2'],
    )
    pricePercent: int = Field(
        ...,
        description='[Price-based additional shipping charge](https://help.vtex.com/en/tutorial/additional-shipping-costs--2vqGwMn0LabkOHY6zSHYNV), calculated based on the total price of the order, in decimal number. You must fill in this field with a percentage value. For example, for an additional charge of 10%, fill in the table with 10.',
        examples=[10],
    )
    pricePercentByWeight: int = Field(
        ...,
        description='[Weight-based additional shipping charge](https://help.vtex.com/en/tutorial/additional-shipping-costs--2vqGwMn0LabkOHY6zSHYNV), calculated based on the total weight of the order.',
        examples=[0],
    )
    timeCost: str = Field(
        ...,
        description='Delivery time frame informed by the carrier, in the format DD.HH:MM:SS.',
        examples=['2.00:00:00'],
    )
    weightEnd: int = Field(..., description='Maximum weight allowed.', examples=[1000])
    weightStart: int = Field(..., description='Minimum weight allowed', examples=[1])
    zipCodeEnd: str = Field(
        ..., description='End of postal code interval.', examples=['1234500']
    )
    zipCodeStart: str = Field(
        ..., description='Start of postal code interval.', examples=['1000000']
    )


class ApiLogisticsPvtConfigurationFreightsCarrierIdValuesUpdatePostRequest(
    RootModel[
        List[ApiLogisticsPvtConfigurationFreightsCarrierIdValuesUpdatePostRequestItem]
    ]
):
    root: List[
        ApiLogisticsPvtConfigurationFreightsCarrierIdValuesUpdatePostRequestItem
    ] = Field(
        ...,
        description='Array of objects, each containing information on a specific freight interval.',
    )


class ApiLogisticsPvtConfigurationFreightsCarrierIdCepValuesGetResponseItem(BaseModel):
    absoluteMoneyCost: float
    country: str
    maxVolume: float
    minimumValueInsurance: float
    operationType: int
    polygon: str
    pricePercent: float
    pricePercentByWeight: float
    restrictedFreights: List[str] = Field(..., description='')
    timeCost: str
    weightEnd: float
    weightStart: float
    zipCodeEnd: str
    zipCodeStart: str


class ApiLogisticsPvtConfigurationFreightsCarrierIdCepValuesGetResponse(
    RootModel[
        List[ApiLogisticsPvtConfigurationFreightsCarrierIdCepValuesGetResponseItem]
    ]
):
    root: List[ApiLogisticsPvtConfigurationFreightsCarrierIdCepValuesGetResponseItem]


class ApiLogisticsPvtConfigurationGeoshapePutRequest(BaseModel):
    geoShape: GeoShape = Field(..., title='GeoShape')
    name: str


class ApiLogisticsPvtConfigurationHolidaysHolidayIdPutRequest(BaseModel):
    name: str
    startDate: str


class Country12(BaseModel):
    acronym: Optional[str] = Field(None, description='Three letter ISO code.')
    name: Optional[str] = Field(None, description='Country name.')


class Location13(BaseModel):
    latitude: Optional[float] = Field(None, description='Latitude.')
    longitude: Optional[float] = Field(None, description='Longitude.')


class Address11(BaseModel):
    city: Optional[str] = Field(None, description='City.')
    complement: Optional[str] = Field(None, description='Address complement.')
    country: Optional[Country12] = Field(
        None, examples=[{'acronym': 'BRA', 'name': 'Brazil'}]
    )
    location: Optional[Location13] = Field(
        None,
        description='Geolocation properties.',
        examples=[{'latitude': -22.974477767944336, 'longitude': -43.18672561645508}],
    )
    neighborhood: Optional[str] = Field(None, description='Neighborhood.')
    number: Optional[str] = Field(None, description='Pickup point address number.')
    postalCode: Optional[str] = Field(None, description='Postal code.')
    state: Optional[str] = Field(None, description='State.')
    street: Optional[str] = Field(None, description='Street name.')


class BusinessHour4(BaseModel):
    closingTime: Optional[str] = Field(None, description='Closing time in `hh:mm:ss`.')
    dayOfWeek: Optional[int] = Field(
        None, description='Day of the week, from `0` (sunday) to `6` (saturday).'
    )
    openingTime: Optional[str] = Field(None, description='Opening time in `hh:mm:ss`.')


class ApiLogisticsPvtConfigurationPickuppointsGetResponseItem(BaseModel):
    accountGroupId: Optional[str] = Field(None, description='Account group ID.')
    accountOwnerId: Optional[str] = Field(None, description='Account owner ID.')
    accountOwnerName: Optional[str] = Field(None, description='Account owner name.')
    address: Optional[Address11] = None
    businessHours: Optional[List[BusinessHour4]] = Field(
        None, description='Business hours information for each day of the week.'
    )
    description: Optional[str] = Field(None, description='Pickup point description.')
    distance: Optional[float] = Field(None, description='Distance.')
    formatted_address: Optional[str] = Field(None, description='Formated address.')
    id: Optional[str] = Field(None, description='Pickup point ID.')
    instructions: Optional[str] = Field(None, description='Instructions.')
    isActive: Optional[bool] = Field(
        None, description='Indicates whether pickup point is active.'
    )
    isThirdPartyPickup: Optional[bool] = Field(
        None, description='Indicates whether pickup point is third party.'
    )
    name: Optional[str] = Field(None, description='Pickup point name.')
    originalId: Optional[str] = Field(None, description='Original ID.')
    parentAccountName: Optional[str] = Field(None, description='Parent account name.')
    pickupHolidays: Optional[List[str]] = Field(
        None, description='Holidays which apply for pickup point.'
    )
    seller: Optional[str] = Field(
        None, description='Seller corresponding to pickup point.'
    )
    tagsLabel: Optional[List[str]] = Field(None, description='List of tags.')


class ApiLogisticsPvtConfigurationPickuppointsGetResponse(
    RootModel[List[ApiLogisticsPvtConfigurationPickuppointsGetResponseItem]]
):
    root: List[ApiLogisticsPvtConfigurationPickuppointsGetResponseItem] = Field(
        ...,
        examples=[
            [
                {
                    'address': {
                        'city': 'Rio de Janeiro',
                        'complement': '',
                        'country': {'acronym': 'BRA', 'name': 'Brazil'},
                        'location': {
                            'latitude': -22.92860984802246,
                            'longitude': -22.92860984802246,
                        },
                        'neighborhood': 'Catete',
                        'number': '',
                        'postalCode': '22220070',
                        'state': 'RJ',
                        'street': 'Rua Artur Bernardes',
                    },
                    'businessHours': [
                        {
                            'closingTime': '21:00:00',
                            'dayOfWeek': 0,
                            'openingTime': '11:00:00',
                        }
                    ],
                    'description': 'Loja Barra da Tijuca',
                    'formatted_address': 'undefined',
                    'id': '12345',
                    'instructions': 'Loja Barra da Tijuca',
                    'isActive': True,
                    'name': 'Loja Barra da Tijuca',
                    'warehouseId': None,
                }
            ]
        ],
    )


class Country13(BaseModel):
    acronym: str
    name: str


class Location14(BaseModel):
    latitude: float
    longitude: float


class Address12(BaseModel):
    city: str
    complement: str
    country: Country13 = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    location: Location14 = Field(
        ...,
        examples=[{'latitude': -22.974477767944336, 'longitude': -43.18672561645508}],
        title='Location5',
    )
    neighborhood: str
    number: str
    postalCode: str
    state: str
    street: str


class BusinessHour5(BaseModel):
    closingTime: str
    dayOfWeek: int
    openingTime: str


class ApiLogisticsPvtConfigurationPickuppointsPickupPointIdGetResponse(BaseModel):
    address: Address12 = Field(
        ...,
        examples=[
            {
                'city': 'Rio de Janeiro',
                'complement': '',
                'country': {'acronym': 'BRA', 'name': 'Brazil'},
                'location': {
                    'latitude': -22.92860984802246,
                    'longitude': -22.92860984802246,
                },
                'neighborhood': 'Catete',
                'number': '',
                'postalCode': '22220070',
                'state': 'RJ',
                'street': 'Rua Artur Bernardes',
            }
        ],
        title='Address4',
    )
    businessHours: List[BusinessHour5] = Field(..., description='')
    description: str
    formatted_address: str
    id: str
    instructions: str
    isActive: bool
    name: str
    warehouseId: str


class Country14(BaseModel):
    acronym: str = Field(
        ...,
        description='Three letter ISO code of the address country.',
        examples=['BRA'],
    )
    name: str = Field(..., description='Address country name.', examples=['Brasil'])


class Location15(BaseModel):
    latitude: float = Field(..., description='latitude', examples=[-22.974477767944336])
    longitude: float = Field(
        ..., description='longitude', examples=[-43.18672561645508]
    )


class Address13(BaseModel):
    city: str = Field(..., description='Address city.', examples=['Rio de Janeiro'])
    complement: str = Field(
        ..., description='Address complement.', examples=['3rd floor']
    )
    country: Country14
    location: Location15
    neighborhood: str = Field(
        ..., description='Address neighborhood.', examples=['Botafogo']
    )
    number: str = Field(..., description='Address street number.', examples=['200'])
    postalCode: str = Field(..., description='Postal code.')
    reference: str = Field(
        ...,
        description='Complement that might help locate the shipping address more precisely in case of delivery.',
        examples=['Grey building'],
    )
    state: str = Field(..., description='Address state.', examples=['RJ'])
    street: str = Field(
        ..., description='Address street name.', examples=['Praia de botafogo.']
    )


class ApiLogisticsPvtConfigurationPickuppointsPickupPointIdPutRequest(BaseModel):
    address: Address13 = Field(
        ...,
        examples=[
            {
                'city': 'Rio de Janeiro',
                'complement': '',
                'country': {'acronym': 'BRA', 'name': 'Brazil'},
                'location': {
                    'latitude': -22.974477767944336,
                    'longitude': -43.18672561645508,
                },
                'neighborhood': 'Copacabana',
                'number': '',
                'postalCode': '22070002',
                'reference': 'Grey building',
                'state': 'RJ',
                'street': 'Avenida Atl├óntica',
            }
        ],
    )
    businessHours: List[BusinessHour5] = Field(..., description='')
    description: str = Field(
        ...,
        description='Pickup point description.',
        examples=['Pickup your items in our store.'],
    )
    formatted_address: str = Field(..., description='Formated address.')
    id: str = Field(
        ...,
        description='Pickup Point ID. Cannot contain spaces.',
        examples=['123456789'],
    )
    instructions: str = Field(
        ...,
        description='Pickup point instructions.',
        examples=['Bring your ID in order to pickup your order.'],
    )
    isActive: bool
    isThirdPartyPickup: Optional[bool] = None
    name: str = Field(..., description='Pickup point name.', examples=['Pickup store.'])
    tagsLabel: List[str] = Field(..., description='')


class Country15(BaseModel):
    acronym: str
    name: str


class Location16(BaseModel):
    latitude: float
    longitude: float


class Address14(BaseModel):
    city: str
    complement: str
    country: Country15 = Field(
        ..., examples=[{'acronym': 'BRA', 'name': 'Brazil'}], title='Country'
    )
    location: Location16 = Field(
        ...,
        examples=[{'latitude': -22.974477767944336, 'longitude': -43.18672561645508}],
        title='Location5',
    )
    neighborhood: str
    number: str
    postalCode: str
    reference: str
    state: str
    street: str


class ApiLogisticsPvtConfigurationPickuppointsPickupPointIdPutResponse(BaseModel):
    address: Address14 = Field(
        ...,
        examples=[
            {
                'city': 'Rio de Janeiro',
                'complement': '',
                'country': {'acronym': 'BRA', 'name': 'Brazil'},
                'location': {
                    'latitude': -22.974477767944336,
                    'longitude': -43.18672561645508,
                },
                'neighborhood': 'Copacabana',
                'number': '',
                'postalCode': '22070002',
                'reference': None,
                'state': 'RJ',
                'street': 'Avenida Atl├óntica',
            }
        ],
        title='Address2',
    )
    businessHours: List[BusinessHour5] = Field(..., description='')
    description: str
    formatted_address: str
    id: str
    instructions: str
    isActive: bool
    name: str
    pickupHolidays: List[str] = Field(..., description='')
    tagsLabel: List[str] = Field(..., description='')


class WarehouseDock3(BaseModel):
    cost: float = Field(
        ...,
        description='Extra charges added to the shipping rate when **Additional shipping costs** are configured.',
        examples=[1],
    )
    dockId: str = Field(
        ..., description='Code that identifies a dock.', examples=['dock1']
    )
    time: str = Field(
        ...,
        description="This field returns the dock's processing time in days and hours. If none is configured, the request returns `00:00:00`.",
        examples=['00:00:00'],
    )


class ApiLogisticsPvtConfigurationWarehousesGetResponseItem(BaseModel):
    id: str = Field(
        ..., description='Code that identifies a warehouse.', examples=['warehouse123']
    )
    isActive: bool = Field(
        ...,
        description='Shows if the warehouse is active (`true`) or inactive (`false`).',
        examples=[True],
    )
    name: str = Field(
        ..., description='Name of the warehouse.', examples=['Main Warehouse']
    )
    pickupPointIds: List = Field(
        ...,
        description="This field returns a list of the [pickup points' IDs](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) associated with the given warehouse.",
        examples=[['NameId1']],
    )
    priority: int = Field(
        ...,
        description='If the warehouse was configured as a priority. When no priority was set, the value returns`0`.',
        examples=[0],
    )
    warehouseDocks: List[WarehouseDock3] = Field(
        ...,
        description='Information related to the docks available for the warehouses.',
    )


class ApiLogisticsPvtConfigurationWarehousesGetResponse(
    RootModel[List[ApiLogisticsPvtConfigurationWarehousesGetResponseItem]]
):
    root: List[ApiLogisticsPvtConfigurationWarehousesGetResponseItem]


class WarehouseDock4(BaseModel):
    cost: str
    costToDisplay: str
    dockId: str
    name: str
    time: str
    translateDays: str


class ApiLogisticsPvtConfigurationWarehousesPostRequest(BaseModel):
    id: str
    name: str
    warehouseDocks: List[WarehouseDock4] = Field(..., description='')


class WarehouseDock5(BaseModel):
    cost: float
    dockId: str
    time: str


class ApiLogisticsPvtConfigurationWarehousesWarehouseIdGetResponse(BaseModel):
    id: Optional[str] = None
    isActive: Optional[bool] = Field(
        None,
        description='Shows if the warehouse is active (`true`) or inactive (`false`).',
        examples=[True],
    )
    name: Optional[str] = None
    pickupPointIds: Optional[List] = Field(
        None,
        description="This field returns a list of the [pickup points' IDs](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) associated with the given warehouse.",
        examples=[['NameId1']],
    )
    priority: Optional[int] = Field(
        None,
        description='If the warehouse was configured as a priority. When no priority was set, the value returns`0`.',
        examples=[0],
    )
    warehouseDocks: Optional[List[WarehouseDock5]] = Field(None, description='')


class ApiLogisticsPvtInventoryItemsItemIdWarehousesWarehouseIdDispatchedGetResponseItem(
    BaseModel
):
    availableQuantity: Optional[int] = Field(None, description='Available quantity.')
    dispatchedReservationsQuantity: Optional[int] = Field(
        None, description='Dispatched reservations quantity.'
    )
    isUnlimitedQuantity: Optional[bool] = Field(
        None,
        description='Indicates whether the SKU\'s availability is unlimited ("infinite inventory").',
    )
    quantity: Optional[int] = Field(None, description='SKU quantity.')
    skuId: Optional[str] = Field(None, description='SKU ID.')
    totalReservedQuantity: Optional[int] = Field(
        None, description='Total reserved quantity of the SKU.'
    )
    warehouseId: Optional[str] = Field(None, description='Warehouse ID.')


class ApiLogisticsPvtInventoryItemsItemIdWarehousesWarehouseIdDispatchedGetResponse(
    RootModel[
        List[
            ApiLogisticsPvtInventoryItemsItemIdWarehousesWarehouseIdDispatchedGetResponseItem
        ]
    ]
):
    root: List[
        ApiLogisticsPvtInventoryItemsItemIdWarehousesWarehouseIdDispatchedGetResponseItem
    ] = Field(
        ...,
        examples=[
            [
                {
                    'availableQuantity': 2147483647,
                    'dispatchedReservationsQuantity': 0,
                    'isUnlimitedQuantity': True,
                    'quantity': 2147483647,
                    'skuId': '1',
                    'totalReservedQuantity': 0,
                    'warehouseId': '1',
                }
            ]
        ],
    )


class ApiLogisticsPvtInventoryItemsSkuIdDocksDockIdGetResponseItem(BaseModel):
    availableQuantity: Optional[int] = Field(
        None,
        description='Amount of items available for sale. Difference between total quantity and reserved quantity.',
    )
    dateOfSupplyUtc: Optional[str] = Field(
        None, description='Date of supply lot in UTC.'
    )
    deliveryChannel: Optional[List[str]] = Field(
        None, description='List of delivery channels available.'
    )
    dockId: Optional[str] = Field(None, description='Dock ID.')
    isUnlimited: Optional[bool] = Field(
        None,
        description='Indicates whether the SKU\'s availability is unlimited ("infinite inventory").',
    )
    keepSellingAfterExpiration: Optional[bool] = Field(
        None,
        description='Indicates whether SKU can continue to be sold after the available quantity gets to 0.',
    )
    reservedQuantity: Optional[int] = Field(
        None, description='Reserved quantity of the SKU.'
    )
    salesChannel: Optional[List[str]] = Field(
        None, description='List of sales channels associated.'
    )
    skuId: Optional[str] = Field(None, description='SKU ID.')
    timeToRefill: Optional[str] = Field(
        None, description='Time to refill (deprecated).'
    )
    totalQuantity: Optional[int] = Field(None, description='Total quantity of SKU.')
    transfer: Optional[str] = Field(None, description='Transfer.')
    warehouseId: Optional[str] = Field(None, description='Warehouse ID.')


class ApiLogisticsPvtInventoryItemsSkuIdDocksDockIdGetResponse(
    RootModel[List[ApiLogisticsPvtInventoryItemsSkuIdDocksDockIdGetResponseItem]]
):
    root: List[ApiLogisticsPvtInventoryItemsSkuIdDocksDockIdGetResponseItem] = Field(
        ...,
        examples=[
            [
                {
                    'availableQuantity': 1000000,
                    'dateOfSupplyUtc': '2020-04-05T00:00:00+00:00',
                    'deliveryChannels': ['delivery'],
                    'dockId': '1',
                    'isUnlimited': True,
                    'keepSellingAfterExpiration': False,
                    'reservedQuantity': 0,
                    'salesChannel': ['1'],
                    'skuId': '1',
                    'supplyLotId': None,
                    'timeToRefill': '01:50:00',
                    'totalQuantity': 1000000,
                    'transfer': 'transfer1',
                    'warehouseId': '1',
                },
                {
                    'availableQuantity': 1000000,
                    'dateOfSupplyUtc': '2020-04-05T00:00:00+00:00',
                    'deliveryChannels': ['delivery'],
                    'dockId': '1',
                    'isUnlimited': True,
                    'keepSellingAfterExpiration': False,
                    'reservedQuantity': 117,
                    'salesChannel': ['1'],
                    'skuId': '1',
                    'supplyLotId': None,
                    'timeToRefill': '01:50:00',
                    'totalQuantity': 1000117,
                    'transfer': 'transfer2',
                    'warehouseId': '1_1',
                },
            ]
        ],
    )


class ApiLogisticsPvtInventoryItemsSkuIdDocksDockIdWarehousesWarehouseIdGetResponseItem(
    BaseModel
):
    availableQuantity: Optional[int] = Field(
        None,
        description='Amount of items available for sale. Difference between total quantity and reserved quantity.',
    )
    dateOfSupplyUtc: Optional[str] = Field(
        None, description='Date of supply lot in UTC.'
    )
    deliveryChannel: Optional[List[str]] = Field(
        None, description='List of delivery channels available.'
    )
    dockId: Optional[str] = Field(None, description='Dock ID.')
    isUnlimited: Optional[bool] = Field(
        None,
        description='Indicates whether the SKU\'s availability is unlimited ("infinite inventory").',
    )
    keepSellingAfterExpiration: Optional[bool] = Field(
        None,
        description='Indicates whether SKU can continue to be sold after the available quantity gets to 0.',
    )
    reservedQuantity: Optional[int] = Field(
        None, description='Reserved quantity of the SKU.'
    )
    salesChannel: Optional[List[str]] = Field(
        None, description='List of sales channels associated.'
    )
    skuId: Optional[str] = Field(None, description='SKU ID.')
    timeToRefill: Optional[str] = Field(
        None, description='Time to refill (deprecated).'
    )
    totalQuantity: Optional[int] = Field(None, description='Total quantity of SKU.')
    transfer: Optional[str] = Field(None, description='Transfer.')
    warehouseId: Optional[str] = Field(None, description='Warehouse ID.')


class ApiLogisticsPvtInventoryItemsSkuIdDocksDockIdWarehousesWarehouseIdGetResponse(
    RootModel[
        List[
            ApiLogisticsPvtInventoryItemsSkuIdDocksDockIdWarehousesWarehouseIdGetResponseItem
        ]
    ]
):
    root: List[
        ApiLogisticsPvtInventoryItemsSkuIdDocksDockIdWarehousesWarehouseIdGetResponseItem
    ] = Field(
        ...,
        examples=[
            [
                {
                    'availableQuantity': 1000000,
                    'dateOfSupplyUtc': '2020-04-05T00:00:00+00:00',
                    'deliveryChannels': ['delivery'],
                    'dockId': '1',
                    'isUnlimited': True,
                    'keepSellingAfterExpiration': False,
                    'reservedQuantity': 0,
                    'salesChannel': ['1'],
                    'skuId': '1',
                    'supplyLotId': None,
                    'timeToRefill': '12:50:00',
                    'totalQuantity': 1000000,
                    'transfer': 'Tranfer1',
                    'warehouseId': '1',
                }
            ]
        ],
    )


class ApiLogisticsPvtInventoryItemsSkuIdWarehousesWarehouseIdGetResponseItem(BaseModel):
    availableQuantity: Optional[int] = Field(
        None,
        description='Amount of items available for sale. Difference between total quantity and reserved quantity.',
    )
    dateOfSupplyUtc: Optional[str] = Field(
        None, description='Date of supply lot in UTC.'
    )
    deliveryChannel: Optional[List[str]] = Field(
        None, description='List of delivery channels available.'
    )
    dockId: Optional[str] = Field(None, description='Dock ID.')
    isUnlimited: Optional[bool] = Field(
        None,
        description='Indicates whether the SKU\'s availability is unlimited ("infinite inventory").',
    )
    keepSellingAfterExpiration: Optional[bool] = Field(
        None,
        description='Indicates whether SKU can continue to be sold after the available quantity gets to 0.',
    )
    reservedQuantity: Optional[int] = Field(
        None, description='Reserved quantity of the SKU.'
    )
    salesChannel: Optional[List[str]] = Field(
        None, description='List of sales channels associated.'
    )
    skuId: Optional[str] = Field(None, description='SKU ID.')
    timeToRefill: Optional[str] = Field(
        None, description='Time to refill (deprecated).'
    )
    totalQuantity: Optional[int] = Field(None, description='Total quantity of SKU.')
    transfer: Optional[str] = Field(None, description='Transfer.')
    warehouseId: Optional[str] = Field(None, description='Warehouse ID.')


class ApiLogisticsPvtInventoryItemsSkuIdWarehousesWarehouseIdGetResponse(
    RootModel[
        List[ApiLogisticsPvtInventoryItemsSkuIdWarehousesWarehouseIdGetResponseItem]
    ]
):
    root: List[
        ApiLogisticsPvtInventoryItemsSkuIdWarehousesWarehouseIdGetResponseItem
    ] = Field(
        ...,
        examples=[
            [
                {
                    'availableQuantity': 1000000,
                    'dateOfSupplyUtc': '12020-04-05T00:00:00+00:00',
                    'deliveryChannels': ['delivery'],
                    'dockId': '1',
                    'isUnlimited': True,
                    'keepSellingAfterExpiration': False,
                    'reservedQuantity': 0,
                    'salesChannel': ['1'],
                    'skuId': '1',
                    'supplyLotId': '05-05-22',
                    'timeToRefill': '1',
                    'totalQuantity': 1000000,
                    'transfer': 'Transfer 1',
                    'warehouseId': '1',
                }
            ]
        ],
    )


class ApiLogisticsPvtInventoryItemsSkuIdWarehousesWarehouseIdSupplyLotsSupplyLotIdPutRequest(
    BaseModel
):
    dateOfSupplyUtc: str
    keepSellingAfterExpiration: bool
    quantity: float


class Dimension13(BaseModel):
    height: int
    length: int
    weight: int
    width: int


class Item6(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension13 = Field(
        ...,
        examples=[{'height': 1, 'length': 1, 'weight': 150, 'width': 1}],
        title='Dimension',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    price: int
    quantity: int


class Location17(BaseModel):
    country: str
    inStore: InStore = Field(
        ..., examples=[{'IsCheckedIn': False, 'StoreId': None}], title='InStore'
    )
    zipCode: str


class DeliveryItemOption2(BaseModel):
    aditionalTimeBlockedDays: str
    deliveryWindows: List[str] = Field(..., description='')
    dockId: str
    dockTime: str
    item: Item6 = Field(
        ...,
        examples=[
            {
                'additionalHandlingTime': '00:00:00',
                'dimension': {'height': 1, 'length': 1, 'weight': 150, 'width': 1},
                'groupItemId': None,
                'id': '2390059',
                'kitItem': [],
                'price': 0,
                'quantity': 1,
            }
        ],
        title='Item',
    )
    listPrice: float
    location: Location17 = Field(
        ...,
        examples=[
            {
                'country': 'BRA',
                'inStore': {'IsCheckedIn': False, 'StoreId': None},
                'zipCode': '22220070',
            }
        ],
        title='Location',
    )
    promotionalPrice: float
    slaType: str
    slaTypeName: str
    timeToDockPlusDockTime: str
    totalTime: str
    transitTime: str
    wareHouseId: str


class ApiLogisticsPvtInventoryReservationsPostRequest(BaseModel):
    autorizationExpirationTTL: str
    deliveryItemOptions: List[DeliveryItemOption2] = Field(..., description='')
    lockId: str
    salesChannel: str


class Dimension14(BaseModel):
    height: float
    length: float
    maxSumDimension: float
    weight: float
    width: float


class Item7(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension14 = Field(
        ...,
        examples=[
            {
                'height': 10,
                'length': 35,
                'maxSumDimension': 0,
                'weight': 800,
                'width': 12,
            }
        ],
        title='Dimension1',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    modal: str
    price: float
    quantity: int
    unlimitedQuantity: bool


class Location18(BaseModel):
    country: str
    deliveryPointId: str
    inStore: InStore = Field(
        ..., examples=[{'IsCheckedIn': False, 'StoreId': '180082'}], title='InStore1'
    )
    point: str
    zipCode: str


class SlaRequestItem1(BaseModel):
    deliveryWindows: str
    dockId: str
    dockTime: str
    freightTableId: str
    freightTableName: str
    item: Item7 = Field(
        ...,
        examples=[
            {
                'additionalHandlingTime': '00:00:00',
                'dimension': {
                    'height': 10,
                    'length': 35,
                    'maxSumDimension': 0,
                    'weight': 800,
                    'width': 12,
                },
                'groupItemId': None,
                'id': '2390059',
                'kitItem': [],
                'modal': None,
                'price': 0,
                'quantity': 1,
                'unlimitedQuantity': False,
            }
        ],
        title='Item1',
    )
    listPrice: float
    location: Location18 = Field(
        ...,
        examples=[
            {
                'country': 'BRA',
                'deliveryPointId': None,
                'inStore': {'IsCheckedIn': False, 'StoreId': '180082'},
                'point': None,
                'zipCode': '22220070',
            }
        ],
        title='Location1',
    )
    pickupStoreInfo: str
    promotionalPrice: float
    slaType: str
    slaTypeName: str
    timeToDockPlusDockTime: str
    totalTime: str
    transitTime: str
    wareHouseId: str
    wmsEndPoint: str


class ApiLogisticsPvtInventoryReservationsPostResponse(BaseModel):
    AuthorizedDateUtc: str
    CanceledDateUtc: str
    ConfirmedDateUtc: str
    Errors: List[str] = Field(..., description='')
    IsSucess: bool
    LastUpdateDateUtc: str
    LockId: str
    MaximumConfirmationDateUtc: str
    PickupPointItemOptions: str
    ReservationDateUtc: str
    SalesChannel: str
    SlaRequest: List[SlaRequestItem1] = Field(..., description='')
    Status: int


class Item8(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension14 = Field(
        ...,
        examples=[
            {
                'height': 10,
                'length': 35,
                'maxSumDimension': 0,
                'weight': 800,
                'width': 12,
            }
        ],
        title='Dimension1',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    modal: str
    price: float
    quantity: int
    unlimitedQuantity: bool


class Location19(BaseModel):
    country: str
    deliveryPointId: str
    inStore: InStore = Field(
        ..., examples=[{'IsCheckedIn': False, 'StoreId': '180082'}], title='InStore1'
    )
    point: str
    zipCode: str


class SlaRequestItem2(BaseModel):
    deliveryWindows: Optional[str] = None
    dockId: Optional[str] = None
    dockTime: Optional[str] = None
    freightTableId: Optional[str] = None
    freightTableName: Optional[str] = None
    item: Optional[Item8] = Field(
        None,
        examples=[
            {
                'additionalHandlingTime': '00:00:00',
                'dimension': {
                    'height': 10,
                    'length': 35,
                    'maxSumDimension': 0,
                    'weight': 800,
                    'width': 12,
                },
                'groupItemId': None,
                'id': '2390059',
                'kitItem': [],
                'modal': None,
                'price': 0,
                'quantity': 1,
                'unlimitedQuantity': False,
            }
        ],
        title='Item1',
    )
    listPrice: Optional[float] = None
    location: Optional[Location19] = Field(
        None,
        examples=[
            {
                'country': 'BRA',
                'deliveryPointId': None,
                'inStore': {'IsCheckedIn': False, 'StoreId': '180082'},
                'point': None,
                'zipCode': '22220070',
            }
        ],
        title='Location1',
    )
    pickupStoreInfo: Optional[str] = None
    promotionalPrice: Optional[float] = None
    slaType: Optional[str] = None
    slaTypeName: Optional[str] = None
    timeToDockPlusDockTime: Optional[str] = None
    totalTime: Optional[str] = None
    transitTime: Optional[str] = None
    wareHouseId: Optional[str] = None
    wmsEndPoint: Optional[str] = None


class ApiLogisticsPvtInventoryReservationsReservationIdGetResponse(BaseModel):
    AuthorizedDateUtc: Optional[str] = Field(
        None, description='Authorized date in UTC.'
    )
    CanceledDateUtc: Optional[str] = Field(None, description='Canceled date in UTC.')
    ConfirmedDateUtc: Optional[str] = Field(None, description='Confirmed date in UTC.')
    Errors: Optional[List[str]] = Field(
        None, description='Information on errors, if there are any.'
    )
    IsSucess: Optional[bool] = None
    LastUpdateDateUtc: Optional[str] = Field(
        None, description='Date of the last update in UTC.'
    )
    LockId: Optional[str] = Field(None, description='Lock ID.')
    MaximumConfirmationDateUtc: Optional[str] = Field(
        None, description='Maximum confirmation date in UTC.'
    )
    PickupPointItemOptions: Optional[str] = Field(
        None, description='Pickup point item options.'
    )
    ReservationDateUtc: Optional[str] = Field(
        None, description='Reservation date in UTC.'
    )
    SalesChannel: Optional[str] = Field(None, description='Sales channel.')
    SlaRequest: Optional[List[SlaRequestItem2]] = Field(
        None, description='Information on SLA request.'
    )
    Status: Optional[int] = Field(
        None,
        description='Reservation status, being:\n\r`0`: `NotCommitted`\n\r`1`: `Authorized`\n\r`2`: `Confirmed`\n\r`3`: `Canceled_AbortedCommitted`\n\r`4`: `Canceled_AuthorizationExpired`\n\r`5`: `Canceled_Manually`',
    )


class ApiLogisticsPvtInventorySkusSkuIdGetResponse(BaseModel):
    balance: List[BalanceItem] = Field(..., description='')
    skuId: str


class ApiLogisticsPvtInventorySkusSkuIdWarehousesWarehouseIdPutRequest(BaseModel):
    dateUtcOnBalanceSystem: Optional[str] = Field(
        None,
        description='Defines the corresponding moment to the informed warehouse. It is useful due to the liberation of handling order reservations. \r\n\r\nWhen requested as `null`, this value will be the date/time of the request. Its format is `DateTimeOffset`, as in `yyyy-mm-dd-Thh:mm:ss`. For example: `2022-03-15T00:52:16`.',
        examples=['null'],
    )
    quantity: int
    timeToRefill__deprecated_: str = Field(..., alias='timeToRefill (deprecated)')
    unlimitedQuantity: bool


class CarrierBusinessHour(BaseModel):
    closingTime: str = Field(
        ..., description='Closing time.', examples=['23:59:59'], title='closingTime'
    )
    dayOfWeek: int = Field(
        ...,
        description='Day of the week, from `0` (sunday) to `6` (saturday).',
        examples=[1],
        title='dayOfWeek',
    )
    openingTime: str = Field(
        ..., description='Opening time.', examples=['00:00:00'], title='openingTime'
    )


class BusinessHourSettings(BaseModel):
    carrierBusinessHours: List[CarrierBusinessHour] = Field(
        ...,
        description='Array containing objects with business hour configurations.',
        title='carrierBusinessHours',
    )
    isOpenOutsideBusinessHours: bool = Field(
        ...,
        description='Select whether the shipping policy allows deliveries outside business hours.',
        examples=[True],
        title='isOpenOutsideBusinessHours',
    )


class CarrierScheduleItem(BaseModel):
    dayOfWeek: Optional[int] = Field(
        None,
        description='Day of the week, from `0` (sunday) to `6` (saturday).',
        examples=[0],
    )
    timeLimit: Optional[str] = Field(
        None, description='Time limit.', examples=['time_limit']
    )


class CubicWeightSettings(BaseModel):
    minimunAcceptableVolumetricWeight: float = Field(
        ..., description='', examples=[0], title='minimunAcceptableVolumetricWeight'
    )
    volumetricFactor: float = Field(
        ...,
        description='Factor that will be used on the cubic weight calculation.',
        examples=[0],
        title='volumetricFactor',
    )


class DeliveryRange7(BaseModel):
    deliveryCapacity: Optional[List[DeliveryCapacityItem]] = Field(
        None,
        description='Sets maximum delivery capacity for a given reservation window for scheduled delivery.',
    )
    endTime: str = Field(
        ..., description='End time for day of the week.', examples=['12:30:00']
    )
    listPrice: float = Field(
        ..., description='List price for day of the week.', examples=[0]
    )
    startTime: str = Field(
        ...,
        description='Start time for day of the week.',
        examples=['11:00:00'],
        title='startTime',
    )


class DayOfWeekForDeliveryItem4(BaseModel):
    dayOfWeek: int = Field(
        ...,
        description='Day of the week, from `0` (sunday) to `6` (saturday).',
        examples=[2],
    )
    deliveryRanges: List[DeliveryRange7] = Field(
        ..., description='Reservation windows for scheduled delivery.'
    )


class DeliveryScheduleSettings(BaseModel):
    dayOfWeekForDelivery: List[DayOfWeekForDeliveryItem4] = Field(
        ...,
        description='Select the chosen days for delivery. Values for each day of the week are: 0 = sunday, 1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday. Make sure to add the available hours for the chosen days, following the example.',
        examples=[
            [
                {
                    'dayOfWeek': 2,
                    'deliveryRanges': [
                        {
                            'endTime': '12:00:00',
                            'listPrice': 10,
                            'startTime': '08:00:00',
                        },
                        {
                            'endTime': '18:00:00',
                            'listPrice': 10,
                            'startTime': '12:01:00',
                        },
                    ],
                    'maxRangeDelivery': 5,
                }
            ]
        ],
        title='dayOfWeekForDelivery',
    )
    maxRangeDelivery: float = Field(
        ...,
        description="Range of days available within a delivery window, for the customer to choose the scheduled delivery. For example, if the configured maxRangeDelivery is equal 7, and the customer buys something on a Tuesday, the options for scheduled delivery will be shown until the following Tuesday (7 days from the purchase day). If no options are available within the maxRangeDelivery set, this shipping policy won't be shown on the checkout.",
        examples=[0],
        title='maxRangeDelivery',
    )
    useDeliverySchedule: bool = Field(
        ...,
        description='Select the Scheduled Delivery configuration.',
        examples=[True],
        title='useDeliverySchedule',
    )


class MaxDimension5(BaseModel):
    largestMeasure: float = Field(
        ...,
        description='Largest measure of the package.',
        examples=[0],
        title='largestMeasure',
    )
    maxMeasureSum: float = Field(
        ...,
        description='Sum of all maximum measures of the package.',
        examples=[0],
        title='maxMeasureSum',
    )


class ModalSettings(BaseModel):
    modals: List = Field(
        ...,
        description='Type of special freight.',
        examples=[['Modal1']],
        title='modals',
    )
    useOnlyItemsWithDefinedModal: bool = Field(
        ...,
        description="When set as `true`, the modal's configurations will apply only for items with a defined modal.",
        examples=[False],
        title='useOnlyItemsWithDefinedModal',
    )


class PickupPointsSettings(BaseModel):
    pickupPointIds: List = Field(
        ...,
        description='Insert the IDs for pickup points previously configured in your store.',
        examples=[['Id1', 'Id2']],
        title='pickupPointIds',
    )
    pickupPointTags: List = Field(
        ...,
        description='Insert the tags for pickup points previously configured in your store.',
        examples=[['Tag1', 'Tag2']],
        title='pickupPointTags',
    )
    sellers: List = Field(
        ...,
        description='Sellers that will be associated with the [pickup points](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) of the shipping policy being created.',
        examples=[['Seller1']],
        title='sellers',
    )


class WeekendAndHolidays(BaseModel):
    holiday: bool = Field(
        ...,
        description='Does the shipping policy allow deliveries onholidays?',
        examples=[False],
        title='holiday',
    )
    saturday: bool = Field(
        ...,
        description='Does the shipping policy allow deliveries on saturdays?',
        examples=[False],
        title='saturday',
    )
    sunday: bool = Field(
        ...,
        description='Does the shipping policy allow deliveries on sundays?',
        examples=[False],
        title='sunday',
    )


class ApiLogisticsPvtShippingPoliciesPostRequest(BaseModel):
    businessHourSettings: BusinessHourSettings = Field(
        ...,
        description='Business hour configuration.',
        examples=[
            {
                'carrierBusinessHours': [
                    {
                        'closingTime': '18:59:59',
                        'dayOfWeek': 0,
                        'openingTime': '09:00:00',
                    }
                ],
                'isOpenOutsideBusinessHours': True,
            }
        ],
        title='businessHourSettings',
    )
    carrierSchedule: Optional[List[CarrierScheduleItem]] = Field(
        None,
        description='Schedule sent by the carrier, to configure Shipping policy',
        title='carrierSchedule',
    )
    cubicWeightSettings: CubicWeightSettings = Field(
        ...,
        description="Measure that accounts package's volume, and not only weight.",
        examples=[{'minimunAcceptableVolumetricWeight': 5, 'volumetricFactor': 3}],
        title='cubicWeightSettings',
    )
    deliveryScheduleSettings: DeliveryScheduleSettings = Field(
        ...,
        description='Settings for the Scheduled Delivery feature.',
        examples=[
            {
                'dayOfWeekForDelivery': [
                    {
                        'dayOfWeek': 2,
                        'deliveryRanges': [
                            {
                                'endTime': '12:00:00',
                                'listPrice': 5,
                                'startTime': '08:00:00',
                            },
                            {
                                'endTime': '18:00:00',
                                'listPrice': 10,
                                'startTime': '12:01:00',
                            },
                        ],
                    }
                ],
                'maxRangeDelivery': 5,
                'useDeliverySchedule': True,
            }
        ],
        title='deliveryScheduleSettings',
    )
    id: str = Field(
        ...,
        description='ID of the shipping policy.',
        examples=['123'],
        title='id schema',
    )
    isActive: bool = Field(
        ...,
        description='Indicates whether shipping policy is active or not.',
        examples=[False],
    )
    maxDimension: MaxDimension5 = Field(
        ...,
        description='Object containing attributes of maximum dimension permitted by the shipping policy (carrier).',
        examples=[{'largestMeasure': 15, 'maxMeasureSum': 25}],
        title='maxDimension',
    )
    maximumValueAceptable: float = Field(
        ...,
        description='Maximum value accepted by the carrier, to realize the shipping.',
        examples=[0],
        title='maximumValueAceptable',
    )
    minimumValueAceptable: float = Field(
        ...,
        description='Minimum value accepted by the carrier, to realize the shipping.',
        examples=[0],
        title='minimumValueAceptable',
    )
    modalSettings: ModalSettings = Field(
        ...,
        description='Configurations for the [modal](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125), which is the attachement of a specific product to a carrier specialized in delivering that type of product.',
        examples=[{'modals': ['Modal1'], 'useOnlyItemsWithDefinedModal': False}],
        title='modalSettings',
    )
    name: str = Field(
        ...,
        description='Name of the shipping policy.',
        examples=['Normal'],
        title='name',
    )
    numberOfItemsPerShipment: int = Field(
        ...,
        description="Capacity of your store's logistics of shipment, determines number of items permitted per shipment.",
        examples=[5],
        title='numberOfItemsPerShipment',
    )
    pickupPointsSettings: PickupPointsSettings = Field(
        ...,
        description='Configuration for Pickup Points.',
        examples=[
            {
                'pickupPointIds': ['null'],
                'pickupPointTags': ['null'],
                'sellers': ['cosmetics2'],
            }
        ],
        title='pickupPointsSettings',
    )
    shippingMethod: str = Field(
        ...,
        description='Type of shipping available for this shipping policy (carrier). Options shown on freight simulation',
        examples=['Normal'],
        title='shippingMethod',
    )
    weekendAndHolidays: WeekendAndHolidays = Field(
        ...,
        description='If the shipping policy includes deliveries on weekends and holidays.',
        examples=[{'holiday': False, 'saturday': False, 'sunday': False}],
        title='weekendAndHolidays',
    )


class DeliveryRange8(BaseModel):
    deliveryCapacity: Optional[List[DeliveryCapacityItem]] = Field(
        None,
        description='Sets maximum delivery capacity for a given reservation window for scheduled delivery.',
    )
    endTime: str = Field(
        ..., description='End time for day of the week.', examples=['12:30:00']
    )
    listPrice: float = Field(
        ..., description='List price for day of the week.', examples=[0]
    )
    startTime: str = Field(
        ...,
        description='Start time for day of the week.',
        examples=['11:00:00'],
        title='startTime',
    )


class DayOfWeekForDeliveryItem5(BaseModel):
    dayOfWeek: int = Field(
        ...,
        description='Day of the week, from `0` (sunday) to `6` (saturday).',
        examples=[2],
    )
    deliveryRanges: List[DeliveryRange8] = Field(
        ..., description='Reservation windows for scheduled delivery.'
    )


class DeliveryScheduleSettings1(BaseModel):
    dayOfWeekForDelivery: List[DayOfWeekForDeliveryItem5] = Field(
        ...,
        description='Select the chosen days for delivery. Values for each day of the week are: 0 = sunday, 1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday. Make sure to add the available hours for the chosen days, following the example.',
    )
    maxRangeDelivery: float = Field(
        ...,
        description="Range of days available within a delivery window, for the customer to choose the scheduled delivery. For example, if the configured maxRangeDelivery is equal 7, and the customer buys something on a Tuesday, the options for scheduled delivery will be shown until the following Tuesday (7 days from the purchase day). If no options are available within the maxRangeDelivery set, this shipping policy won't be shown on the checkout.",
        examples=[0],
    )
    useDeliverySchedule: bool = Field(
        ..., description='Select the Scheduled Delivery configuration.', examples=[True]
    )


class ApiLogisticsPvtShippingPoliciesIdPutRequest(BaseModel):
    deliveryOnWeekends: bool = Field(
        ...,
        description='If the shipping policy (carrier) delivers on weekends',
        examples=[False],
        title='deliveryOnWeekends',
    )
    deliveryScheduleSettings: Optional[DeliveryScheduleSettings1] = Field(
        None, description='Settings for the Scheduled Delivery feature.'
    )
    isActive: bool = Field(
        ...,
        description='If the shipping policy is active or not.',
        examples=[True],
        title='isActive',
    )
    maxDimension: MaxDimension5 = Field(
        ...,
        description='Object containing attributes of maximum dimension permitted by the shipping policy (carrier).',
        examples=[{'largestMeasure': 10, 'maxMeasureSum': 30}],
        title='maxDimension',
    )
    name: str = Field(
        ...,
        description='Name of the shipping policy',
        examples=['Correios PAC'],
        title='name',
    )
    shippingMethod: str = Field(
        ...,
        description='Type of shipping available for this shipping policy (carrier). Options shown on freight simulation.',
        examples=['Normal'],
        title='shippingMethod',
    )


class Dimension16(BaseModel):
    height: int
    length: int
    weight: int
    width: int


class KitItemItem2(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension16 = Field(
        ...,
        examples=[{'height': 1, 'length': 1, 'weight': 150, 'width': 1}],
        title='Dimension',
    )
    groupItemId: str
    id: str
    kitItem: List[str] = Field(..., description='')
    price: int
    quantity: int


class Item9(BaseModel):
    additionalHandlingTime: str
    dimension: Dimension16 = Field(
        ...,
        examples=[{'height': 1, 'length': 1, 'weight': 150, 'width': 1}],
        title='Dimension',
    )
    groupItemId: str
    id: str
    kitItem: List[KitItemItem2] = Field(..., description='')
    price: int
    quantity: int


class Location20(BaseModel):
    country: str
    point: List[float] = Field(..., description='')
    zipCode: str


class ApiLogisticsPvtShippingCalculatePostRequestItem(BaseModel):
    items: List[Item9] = Field(..., description='')
    location: Location20 = Field(
        ...,
        examples=[
            {
                'country': 'BRA',
                'point': [-43.32475950000003, -22.9999575],
                'zipCode': '22780084',
            }
        ],
        title='Location3',
    )
    salesChannel: str


class ApiLogisticsPvtShippingCalculatePostRequest(
    RootModel[List[ApiLogisticsPvtShippingCalculatePostRequestItem]]
):
    root: List[ApiLogisticsPvtShippingCalculatePostRequestItem] = Field(
        ..., description=''
    )


class Location21(BaseModel):
    country: str
    deliveryPointId: str
    inStore: InStore = Field(
        ..., examples=[{'IsCheckedIn': False, 'StoreId': '180082'}], title='InStore1'
    )
    point: str
    zipCode: str


class ApiLogisticsPvtShippingCalculatePostResponseItem(BaseModel):
    aditionalTimeBlockedDays: str
    availabilityQuantity: int
    carrierSchedule: List[str] = Field(..., description='')
    coordinates: str
    deliveryOnWeekends: bool
    deliveryWindows: List[DeliveryWindow] = Field(..., description='')
    dockId: str
    dockTime: str
    freightTableId: str
    freightTableName: str
    itemId: str
    listPrice: float
    location: Location21 = Field(
        ...,
        examples=[
            {
                'country': 'BRA',
                'deliveryPointId': None,
                'inStore': {'IsCheckedIn': False, 'StoreId': '180082'},
                'point': None,
                'zipCode': '22220070',
            }
        ],
        title='Location1',
    )
    pickupStoreInfo: str
    quantity: int
    restrictedFreight: str
    salesChannel: str
    slaType: str
    slaTypeName: str
    timeToDockPlusDockTime: str
    totalTime: str
    transitTime: str
    wareHouseId: str


class ApiLogisticsPvtShippingCalculatePostResponse(
    RootModel[List[List[ApiLogisticsPvtShippingCalculatePostResponseItem]]]
):
    root: List[List[ApiLogisticsPvtShippingCalculatePostResponseItem]]
