# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:57:00+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query

from models import (
    ApiLogisticsPvtConfigurationDocksDockIdGetResponse,
    ApiLogisticsPvtConfigurationDocksGetResponse,
    ApiLogisticsPvtConfigurationFreightsCarrierIdCepValuesGetResponse,
    ApiLogisticsPvtConfigurationPickuppointsGetResponse,
    ApiLogisticsPvtConfigurationPickuppointsPickupPointIdGetResponse,
    ApiLogisticsPvtConfigurationPickuppointsPickupPointIdPutResponse,
    ApiLogisticsPvtConfigurationWarehousesGetResponse,
    ApiLogisticsPvtConfigurationWarehousesWarehouseIdGetResponse,
    ApiLogisticsPvtInventoryItemsItemIdWarehousesWarehouseIdDispatchedGetResponse,
    ApiLogisticsPvtInventoryItemsSkuIdDocksDockIdGetResponse,
    ApiLogisticsPvtInventoryItemsSkuIdDocksDockIdWarehousesWarehouseIdGetResponse,
    ApiLogisticsPvtInventoryItemsSkuIdWarehousesWarehouseIdGetResponse,
    ApiLogisticsPvtInventoryReservationsPostResponse,
    ApiLogisticsPvtInventoryReservationsReservationIdGetResponse,
    ApiLogisticsPvtInventorySkusSkuIdGetResponse,
    ApiLogisticsPvtShippingCalculatePostResponse,
    ApiLogisticsPvtShippingPoliciesIdPutRequest,
    ApiLogisticsPvtShippingPoliciesPostRequest,
)

app = MCPProxy(
    contact={},
    description="\r\n\r\n>Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.\r\n\r\nLogistics or fulfillment is the module responsible for shipping calculation and inventory management. \r\n\r\nThe variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.",
    title='Logistics API',
    version='1.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX server URL.',
            'url': 'https://{accountName}.{environment}.com.br',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL.',
                },
                'environment': {
                    'default': '{environment}',
                    'description': 'Environment to use. Used as part of the URL.',
                },
            },
        },
    ],
)


@app.get(
    '/api/logistics-capacity/resources/carrier@{capacityType}@{shippingPolicyId}/time-frames',
    description=""" Get information on all capacity reservations made to scheduled delivery windows in a given time range.


> Note that, while most of our API endpoints return time fields in UTC, this endpoint returns time adjusted to the configured time zone of the account.


> Note that the combined string `carrier@{capacityType}@{shippingPolicyId}` can be referred to as a "resource" in the API's messages. """,
    tags=['capacity_reservation_management', 'reservation_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def search_capacity_reservations_in_time_range(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    capacity_type: str = Path(..., alias='capacityType'),
    shipping_policy_id: str = Path(..., alias='shippingPolicyId'),
    range_start: str = Query(..., alias='rangeStart'),
    range_end: str = Query(..., alias='rangeEnd'),
):
    """
    Search capacity reservations in time range
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics-capacity/resources/carrier@{capacityType}@{shippingPolicyId}/time-frames/{windowDay}F{windowStartTime}T{windowEndTime}',
    description=""" Retrieves capacity usage of a specific scheduled delivery reservation window.


> Note that, while most of our API endpoints return time fields in UTC, this endpoint returns time adjusted to the configured time zone of the account.


> Note that the combined string `carrier@{capacityType}@{shippingPolicyId}` can be referred to as a "resource" in the API's messages. """,
    tags=['capacity_reservation_management', 'shipping_policy_administration'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_capacity_reservation_usage_by_window(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    capacity_type: str = Path(..., alias='capacityType'),
    shipping_policy_id: str = Path(..., alias='shippingPolicyId'),
    window_day: str = Path(..., alias='windowDay'),
    window_start_time: str = Path(..., alias='windowStartTime'),
    window_end_time: str = Path(..., alias='windowEndTime'),
):
    """
    Get capacity reservation usage by window
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/configuration/carriers/{carrierId}/adddayofweekblocked',
    description=""" Adds blocked delivery windows for your store's shipping policies.


> Note that, while most of our API endpoints return time fields in UTC, this endpoint returns time adjusted to the configured time zone of the account. """,
    tags=['blocked_delivery_windows_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def add_blocked_delivery_windows(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    carrier_id: str = Path(..., alias='carrierId'),
):
    """
    Add blocked delivery windows
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/carriers/{carrierId}/getdayofweekblocked',
    description=""" Lists all blocked delivery windows of your store's shipping policies, searching by carrier ID.


> Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account. """,
    tags=['blocked_delivery_windows_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def retrieve_blocked_delivery_windows(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    carrier_id: str = Path(..., alias='carrierId'),
):
    """
    Retrieve blocked delivery windows
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/configuration/carriers/{carrierId}/removedayofweekblocked',
    description=""" Removes the blocked delivery windows set to your store's shipping policies.


> Note that, while most of our API endpoints return time fields in UTC, this endpoint returns time adjusted to the configured time zone of the account. """,
    tags=['blocked_delivery_windows_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def remove_blocked_delivery_windows(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    carrier_id: str = Path(..., alias='carrierId'),
):
    """
    Remove blocked delivery windows
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/docks',
    description=""" Informs a list of all docks. """,
    tags=['dock_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def all_docks(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    List all  docks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/configuration/docks',
    description=""" Creates or updates docks to be used in your logistic operation. """,
    tags=['dock_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create__update_dock(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create/update dock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/logistics/pvt/configuration/docks/{dockId}',
    description=""" Deletes dock by dock ID. """,
    tags=['dock_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def dock(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    dock_id: str = Path(..., alias='dockId'),
):
    """
    Delete dock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/docks/{dockId}',
    description=""" Informs a given dock's information, searching by dock ID. """,
    tags=['dock_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def dock_by_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    dock_id: str = Path(..., alias='dockId'),
):
    """
    List dock by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/configuration/docks/{dockId}/activation',
    description=""" Activates dock through dock ID. """,
    tags=['dock_management', 'warehouse_operations_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def activate_dock(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    dock_id: str = Path(..., alias='dockId'),
):
    """
    Activate dock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/configuration/docks/{dockId}/deactivation',
    description=""" Deactivate dock by dock ID """,
    tags=['dock_management', 'warehouse_operations_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def deactivate_dock(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    dock_id: str = Path(..., alias='dockId'),
):
    """
    Deactivate dock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/configuration/freights/{carrierId}/values/update',
    description=""" Creates or updates the freight values of your store's carriers. Learn more in [Shipping rate template](https://help.vtex.com/en/tutorial/planilha-de-frete--tutorials_127#). """,
    tags=['freight_rate_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create__update_freight_values(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    carrier_id: str = Path(..., alias='carrierId'),
):
    """
    Create/update freight values
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/freights/{carrierId}/{cep}/values',
    description=""" Lists freight values apointed to your store's carriers, searching by carrier ID and postal code (`cep`). """,
    tags=['freight_rate_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def freight_values(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    carrier_id: str = Path(..., alias='carrierId'),
    cep: str = ...,
):
    """
    List freight values
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/geoshape',
    description=""" Lists stored polygons. """,
    tags=['geofence_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def paged_polygons(
    page: str,
    per_page: str = Query(..., alias='perPage'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    List paged polygons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/logistics/pvt/configuration/geoshape',
    description=""" Creates or updates your store's polygons by geoshape coordinates and polygon name. """,
    tags=['geofence_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_update_polygon(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create/update polygon
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/logistics/pvt/configuration/geoshape/{polygonName}',
    description=""" Deletes polygon set up in your store, by polygon name. """,
    tags=['geofence_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_polygon(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    polygon_name: str = Path(..., alias='polygonName'),
):
    """
    Delete polygon
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/geoshape/{polygonName}',
    description=""" Lists your store's polygons by searching through polygon name """,
    tags=['geofence_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def polygonby_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    polygon_name: str = Path(..., alias='polygonName'),
):
    """
    List polygon by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/holidays',
    description=""" Lists information of all holidays. """,
    tags=['holiday_schedule_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def all_holidays(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    List all holidays
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/logistics/pvt/configuration/holidays/{holidayId}',
    description=""" Deletes given holidays set up in your store. """,
    tags=['holiday_schedule_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def holiday(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    holiday_id: str = Path(..., alias='holidayId'),
):
    """
    Delete holiday
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/holidays/{holidayId}',
    description=""" Lists holiday's information by holiday ID. """,
    tags=['holiday_schedule_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def holiday_by_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    holiday_id: str = Path(..., alias='holidayId'),
):
    """
    List holiday by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/logistics/pvt/configuration/holidays/{holidayId}',
    description=""" Creates or updates holidays through holiday ID. """,
    tags=['holiday_schedule_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create__update_holiday(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    holiday_id: str = Path(..., alias='holidayId'),
):
    """
    Create/update holiday
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/pickuppoints',
    description=""" Lists all of your store's pickup points. """,
    tags=['pickup_location_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def list_all_pickup_ppoints(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    List all pickup points
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/pickuppoints/_search',
    description=""" Lists paged pickup points in your store. """,
    tags=['pickup_location_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getpaged(
    page: str,
    page_size: str = Query(..., alias='pageSize'),
    keyword: str = ...,
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    List paged Pickup Points
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/logistics/pvt/configuration/pickuppoints/{pickupPointId}',
    description=""" Deletes a given pickup point for your store, by pickup point ID. """,
    tags=['pickup_location_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    pickup_point_id: str = Path(..., alias='pickupPointId'),
):
    """
    Delete Pickup Point
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/pickuppoints/{pickupPointId}',
    description=""" Lists your store's pickup points while searching by ID. """,
    tags=['pickup_location_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_by_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    pickup_point_id: str = Path(..., alias='pickupPointId'),
):
    """
    List Pickup Point By ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/logistics/pvt/configuration/pickuppoints/{pickupPointId}',
    description=""" Creates or updates [pickup points](https://help.vtex.com/en/subcategory/pickup-points--1c5Btie9ou2Gg2iUo0ggqM#) in your store by Pickup Point ID. """,
    tags=['pickup_location_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_update_pickup_point(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    pickup_point_id: str = Path(..., alias='pickupPointId'),
):
    """
    Create/Update Pickup Point
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/warehouses',
    description=""" Lists information about all warehouses set up in your store. """,
    tags=['warehouse_operations_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def all_warehouses(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    List all warehouses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/configuration/warehouses',
    description=""" Creates or updates your store's warehouses """,
    tags=['warehouse_operations_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create__update_warehouse(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    Create/update warehouse
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/logistics/pvt/configuration/warehouses/{warehouseId}',
    description=""" Deletes given warehouse by warehouse ID. """,
    tags=['warehouse_operations_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def remove_warehouse(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    warehouse_id: str = Path(..., alias='warehouseId'),
):
    """
    Remove warehouse
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/configuration/warehouses/{warehouseId}',
    description=""" Lists the information of a given warehouse, searching by warehouse ID. """,
    tags=['warehouse_operations_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def warehouse_by_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    warehouse_id: str = Path(..., alias='warehouseId'),
):
    """
    List warehouse by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/configuration/warehouses/{warehouseId}/activation',
    description=""" Activates a given warehouse, by warehouse ID. """,
    tags=['warehouse_operations_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def activate_warehouse(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    warehouse_id: str = Path(..., alias='warehouseId'),
):
    """
    Activate warehouse
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/configuration/warehouses/{warehouseId}/deactivation',
    description=""" Deactivates a given warehouse by warehouse ID. """,
    tags=['warehouse_operations_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def deactivate_warehouse(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    warehouse_id: str = Path(..., alias='warehouseId'),
):
    """
    Deactivate warehouse
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/inventory/items/{itemId}/warehouses/{warehouseId}/dispatched',
    description=""" Lists inventory with dispatched reservations. When the number of active reservations is more than 2000 the return is an error with status code 400 (BadRequest) and the message: Too many active reservations. """,
    tags=[
        'inventory_control_management',
        'reservation_handling',
        'warehouse_operations_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getinventorywithdispatchedreservations(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    item_id: str = Path(..., alias='itemId'),
    warehouse_id: str = Path(..., alias='warehouseId'),
):
    """
    List inventory with dispatched reservations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/inventory/items/{skuId}/docks/{dockId}',
    description=""" Lists inventory information per dock set up in your store. """,
    tags=['dock_management', 'inventory_control_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def inventoryperdock(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: str = Path(..., alias='skuId'),
    dock_id: str = Path(..., alias='dockId'),
):
    """
    List inventory per dock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/inventory/items/{skuId}/docks/{dockId}/warehouses/{warehouseId}',
    description=""" Lists information of inventory per dock and warehouse. """,
    tags=['warehouse_operations_management', 'inventory_control_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def inventoryperdockandwarehouse(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: str = Path(..., alias='skuId'),
    dock_id: str = Path(..., alias='dockId'),
    warehouse_id: str = Path(..., alias='warehouseId'),
):
    """
    List inventory per dock and warehouse
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}',
    description=""" Lists inventory information per warehouse on your store. """,
    tags=['warehouse_operations_management', 'inventory_control_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def inventoryperwarehouse(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: str = Path(..., alias='skuId'),
    warehouse_id: str = Path(..., alias='warehouseId'),
):
    """
    List inventory per warehouse
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}/supplyLots',
    description=""" Returns a list of the supply lots of an SKU in a specific warehouse. """,
    tags=[
        'supply_lot_controller',
        'inventory_control_management',
        'warehouse_operations_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_supply_lots(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    sku_id: str = Path(..., alias='skuId'),
    warehouse_id: str = Path(..., alias='warehouseId'),
):
    """
    List supply lots
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}/supplyLots/{supplyLotId}',
    description=""" Creates a new Supply Lot. A Supply Lot lets the store sell products that are not currently available in stock but whose arrival is already scheduled.

Check out our [documentation](https://help.vtex.com/en/tutorial/setting-up-future-inventory--UMSGjooqRfkRbeoh94kS4) about this feature. """,
    tags=[
        'supply_lot_controller',
        'warehouse_operations_management',
        'inventory_control_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def save_supply_lot(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    sku_id: str = Path(..., alias='skuId'),
    warehouse_id: str = Path(..., alias='warehouseId'),
    supply_lot_id: str = Path(..., alias='supplyLotId'),
):
    """
    Save supply lot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}/supplyLots/{supplyLotId}/transfer',
    description=""" Transfers an SKU from a Supply Lot to the currently available inventory.

Check out how this transfer works in further detail by reading our [documentation](https://help.vtex.com/pt/tutorial/configurar-estoque-futuro--UMSGjooqRfkRbeoh94kS4) about this feature. """,
    tags=[
        'supply_lot_controller',
        'warehouse_operations_management',
        'inventory_control_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def transfer_supply_lot(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    sku_id: str = Path(..., alias='skuId'),
    warehouse_id: str = Path(..., alias='warehouseId'),
    supply_lot_id: str = Path(..., alias='supplyLotId'),
):
    """
    Transfer supply lot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/inventory/reservations',
    description=""" Creates [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92). """,
    tags=['reservation_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_reservation(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    Create reservation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/inventory/reservations/{reservationId}',
    description=""" Lists reservation's information by ID. """,
    tags=['reservation_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def reservation_by_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    reservation_id: str = Path(..., alias='reservationId'),
):
    """
    List reservation by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/inventory/reservations/{reservationId}/acknowledge',
    description=""" Acknowledges reservations made by reservation ID. """,
    tags=['reservation_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def acknowledgment_reservation(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    reservation_id: str = Path(..., alias='reservationId'),
):
    """
    Acknowledgment reservation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/inventory/reservations/{reservationId}/cancel',
    description=""" Cancels reservation by reservation ID. """,
    tags=['reservation_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def cancel_reservation(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    reservation_id: str = Path(..., alias='reservationId'),
):
    """
    Cancel reservation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/inventory/reservations/{reservationId}/confirm',
    description=""" Confirms reservation by reservation ID. """,
    tags=['reservation_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def confirm_reservation(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    reservation_id: str = Path(..., alias='reservationId'),
):
    """
    Confirm reservation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/inventory/reservations/{warehouseId}/{skuId}',
    description=""" Lists reservations in your store, by searching through warehouse and SKU. """,
    tags=[
        'reservation_handling',
        'inventory_control_management',
        'warehouse_operations_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def reservationby_warehouseand_sku(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    warehouse_id: str = Path(..., alias='warehouseId'),
    sku_id: str = Path(..., alias='skuId'),
):
    """
    List reservation by warehouse and SKU
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/inventory/skus/{skuId}',
    description=""" Lists your store's inventory by SKU ID """,
    tags=['inventory_control_management', 'warehouse_operations_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def inventory_by_sku(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: str = Path(..., alias='skuId'),
):
    """
    List inventory by SKU
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/logistics/pvt/inventory/skus/{skuId}/warehouses/{warehouseId}',
    description=""" Updates inventory for a given SKU and warehouse. """,
    tags=['warehouse_operations_management', 'inventory_control_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def update_inventory_by_skuand_warehouse(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    sku_id: str = Path(..., alias='skuId'),
    warehouse_id: str = Path(..., alias='warehouseId'),
):
    """
    Update inventory by SKU and warehouse
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/shipping-policies',
    description=""" This endpoint lists existing shipping policies from carriers in your store.


> Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account. """,
    tags=['shipping_policy_administration'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_logistics_pvt_shipping_policies(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    page: str = ...,
    per_page: str = Query(..., alias='perPage'),
):
    """
    List shipping policies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/shipping-policies',
    description=""" This endpoint creates new shipping policies from carriers in your store.


> Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account. """,
    tags=['shipping_policy_administration'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_logistics_pvt_shipping_policies(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    body: ApiLogisticsPvtShippingPoliciesPostRequest = None,
):
    """
    Create shipping policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/logistics/pvt/shipping-policies/{id}',
    description=""" This endpoint deletes existing shipping policies from carriers in your store, searching by their IDs. """,
    tags=['shipping_policy_administration'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_logistics_pvt_shipping_policies__id(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    id: str = ...,
):
    """
    Delete shipping policies by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/logistics/pvt/shipping-policies/{id}',
    description=""" This endpoint lists existing [shipping policies](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) from carriers in your store, searching by their IDs.


> Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account. """,
    tags=['shipping_policy_administration'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_logistics_pvt_shipping_policies__id(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    id: str = ...,
):
    """
    Retrieve shipping policy by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/logistics/pvt/shipping-policies/{id}',
    description=""" This endpoint updates information on existing Shipping Policies from carriers.


> Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account. """,
    tags=['shipping_policy_administration'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_logistics_pvt_shipping_policies__id(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    id: str = ...,
    body: ApiLogisticsPvtShippingPoliciesIdPutRequest = None,
):
    """
    Update shipping policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/logistics/pvt/shipping/calculate',
    description=""" Endpoint used by the checkout to calculate the Service Level Agreement (SLA), a contract between the store and shoppers on the order's fulfillment conditions, such as the shipping estimated date. 

The calculation of the estimated date considers the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) and [loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) related to the order. """,
    tags=['sla_metric_calculation'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def calculate_s_l_a(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Calculate SLA
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
